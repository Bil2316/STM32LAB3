
STM32LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026fc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002808  08002808  00012808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800282c  0800282c  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  0800282c  0800282c  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800282c  0800282c  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800282c  0800282c  0001282c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002830  08002830  00012830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08002834  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000030  08002864  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08002864  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000979c  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ac2  00000000  00000000  000297f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a10  00000000  00000000  0002b2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000928  00000000  00000000  0002bcc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016acf  00000000  00000000  0002c5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b306  00000000  00000000  000430bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000825df  00000000  00000000  0004e3c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d09a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000283c  00000000  00000000  000d09f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	080027f0 	.word	0x080027f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	080027f0 	.word	0x080027f0

0800014c <fsm_for_input_processing>:
#include "input_processing.h"

int pressed_flag[NO_OF_BUTTONS] = {0};

void fsm_for_input_processing(int index)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	switch(buttonState[index])
 8000154:	4a2c      	ldr	r2, [pc, #176]	; (8000208 <fsm_for_input_processing+0xbc>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	4413      	add	r3, r2
 800015a:	781b      	ldrb	r3, [r3, #0]
 800015c:	2b02      	cmp	r3, #2
 800015e:	d034      	beq.n	80001ca <fsm_for_input_processing+0x7e>
 8000160:	2b02      	cmp	r3, #2
 8000162:	dc45      	bgt.n	80001f0 <fsm_for_input_processing+0xa4>
 8000164:	2b00      	cmp	r3, #0
 8000166:	d00f      	beq.n	8000188 <fsm_for_input_processing+0x3c>
 8000168:	2b01      	cmp	r3, #1
 800016a:	d141      	bne.n	80001f0 <fsm_for_input_processing+0xa4>
	{
	case BUTTON_RELEASED:
		if (is_button_press(index))
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	b2db      	uxtb	r3, r3
 8000170:	4618      	mov	r0, r3
 8000172:	f000 f8f5 	bl	8000360 <is_button_press>
 8000176:	4603      	mov	r3, r0
 8000178:	2b00      	cmp	r3, #0
 800017a:	d03b      	beq.n	80001f4 <fsm_for_input_processing+0xa8>
		{
			buttonState[index] = BUTTON_PRESSED;
 800017c:	4a22      	ldr	r2, [pc, #136]	; (8000208 <fsm_for_input_processing+0xbc>)
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	4413      	add	r3, r2
 8000182:	2200      	movs	r2, #0
 8000184:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000186:	e035      	b.n	80001f4 <fsm_for_input_processing+0xa8>
	case BUTTON_PRESSED:
		if (!is_button_press(index))
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	b2db      	uxtb	r3, r3
 800018c:	4618      	mov	r0, r3
 800018e:	f000 f8e7 	bl	8000360 <is_button_press>
 8000192:	4603      	mov	r3, r0
 8000194:	2b00      	cmp	r3, #0
 8000196:	d10a      	bne.n	80001ae <fsm_for_input_processing+0x62>
		{
			buttonState[index] = BUTTON_RELEASED;
 8000198:	4a1b      	ldr	r2, [pc, #108]	; (8000208 <fsm_for_input_processing+0xbc>)
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	4413      	add	r3, r2
 800019e:	2201      	movs	r2, #1
 80001a0:	701a      	strb	r2, [r3, #0]
			pressed_flag[index] = 0;
 80001a2:	4a1a      	ldr	r2, [pc, #104]	; (800020c <fsm_for_input_processing+0xc0>)
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	2100      	movs	r1, #0
 80001a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if (is_button_press_1s(index))
			{
				buttonState[index] = BUTTON_PRESS_FOR_1S;
			}
		}
		break;
 80001ac:	e024      	b.n	80001f8 <fsm_for_input_processing+0xac>
			if (is_button_press_1s(index))
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	b2db      	uxtb	r3, r3
 80001b2:	4618      	mov	r0, r3
 80001b4:	f000 f8ee 	bl	8000394 <is_button_press_1s>
 80001b8:	4603      	mov	r3, r0
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d01c      	beq.n	80001f8 <fsm_for_input_processing+0xac>
				buttonState[index] = BUTTON_PRESS_FOR_1S;
 80001be:	4a12      	ldr	r2, [pc, #72]	; (8000208 <fsm_for_input_processing+0xbc>)
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	4413      	add	r3, r2
 80001c4:	2202      	movs	r2, #2
 80001c6:	701a      	strb	r2, [r3, #0]
		break;
 80001c8:	e016      	b.n	80001f8 <fsm_for_input_processing+0xac>
	case BUTTON_PRESS_FOR_1S:
		if (!is_button_press(index))
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	b2db      	uxtb	r3, r3
 80001ce:	4618      	mov	r0, r3
 80001d0:	f000 f8c6 	bl	8000360 <is_button_press>
 80001d4:	4603      	mov	r3, r0
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d110      	bne.n	80001fc <fsm_for_input_processing+0xb0>
		{
			buttonState[index] = BUTTON_RELEASED;
 80001da:	4a0b      	ldr	r2, [pc, #44]	; (8000208 <fsm_for_input_processing+0xbc>)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	4413      	add	r3, r2
 80001e0:	2201      	movs	r2, #1
 80001e2:	701a      	strb	r2, [r3, #0]
			pressed_flag[index] = 0;
 80001e4:	4a09      	ldr	r2, [pc, #36]	; (800020c <fsm_for_input_processing+0xc0>)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	2100      	movs	r1, #0
 80001ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
		break;
 80001ee:	e005      	b.n	80001fc <fsm_for_input_processing+0xb0>
	default:
		break;
 80001f0:	bf00      	nop
 80001f2:	e004      	b.n	80001fe <fsm_for_input_processing+0xb2>
		break;
 80001f4:	bf00      	nop
 80001f6:	e002      	b.n	80001fe <fsm_for_input_processing+0xb2>
		break;
 80001f8:	bf00      	nop
 80001fa:	e000      	b.n	80001fe <fsm_for_input_processing+0xb2>
		break;
 80001fc:	bf00      	nop
	}
}
 80001fe:	bf00      	nop
 8000200:	3708      	adds	r7, #8
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	200000a0 	.word	0x200000a0
 800020c:	2000004c 	.word	0x2000004c

08000210 <init_button>:

static uint8_t flagForButtonPress1s[NO_OF_BUTTONS];
static uint16_t counterForButtonPress1s[NO_OF_BUTTONS];

void init_button(void)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
	for (int i = 0; i < NO_OF_BUTTONS; i++)
 8000216:	2300      	movs	r3, #0
 8000218:	607b      	str	r3, [r7, #4]
 800021a:	e01b      	b.n	8000254 <init_button+0x44>
	{
		buttonBuffer[i] = BUTTON_IS_RELEASED;
 800021c:	4a12      	ldr	r2, [pc, #72]	; (8000268 <init_button+0x58>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	4413      	add	r3, r2
 8000222:	2201      	movs	r2, #1
 8000224:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = BUTTON_IS_RELEASED;
 8000226:	4a11      	ldr	r2, [pc, #68]	; (800026c <init_button+0x5c>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	4413      	add	r3, r2
 800022c:	2201      	movs	r2, #1
 800022e:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer2[i] = BUTTON_IS_RELEASED;
 8000230:	4a0f      	ldr	r2, [pc, #60]	; (8000270 <init_button+0x60>)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	4413      	add	r3, r2
 8000236:	2201      	movs	r2, #1
 8000238:	701a      	strb	r2, [r3, #0]

		flagForButtonPress1s[i] = 0;
 800023a:	4a0e      	ldr	r2, [pc, #56]	; (8000274 <init_button+0x64>)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	4413      	add	r3, r2
 8000240:	2200      	movs	r2, #0
 8000242:	701a      	strb	r2, [r3, #0]
		counterForButtonPress1s[i] = 0;
 8000244:	4a0c      	ldr	r2, [pc, #48]	; (8000278 <init_button+0x68>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	2100      	movs	r1, #0
 800024a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < NO_OF_BUTTONS; i++)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	3301      	adds	r3, #1
 8000252:	607b      	str	r3, [r7, #4]
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	2b02      	cmp	r3, #2
 8000258:	dde0      	ble.n	800021c <init_button+0xc>
	}
}
 800025a:	bf00      	nop
 800025c:	bf00      	nop
 800025e:	370c      	adds	r7, #12
 8000260:	46bd      	mov	sp, r7
 8000262:	bc80      	pop	{r7}
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	20000058 	.word	0x20000058
 800026c:	2000005c 	.word	0x2000005c
 8000270:	20000060 	.word	0x20000060
 8000274:	20000064 	.word	0x20000064
 8000278:	20000068 	.word	0x20000068

0800027c <button_reading>:

void button_reading(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
	for (int i = 0; i < NO_OF_BUTTONS; i++)
 8000282:	2300      	movs	r3, #0
 8000284:	607b      	str	r3, [r7, #4]
 8000286:	e056      	b.n	8000336 <button_reading+0xba>
	{
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000288:	4a2f      	ldr	r2, [pc, #188]	; (8000348 <button_reading+0xcc>)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	4413      	add	r3, r2
 800028e:	7819      	ldrb	r1, [r3, #0]
 8000290:	4a2e      	ldr	r2, [pc, #184]	; (800034c <button_reading+0xd0>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	4413      	add	r3, r2
 8000296:	460a      	mov	r2, r1
 8000298:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(GPIOB, SELECT_MODE_Pin << i);
 800029a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	fa02 f303 	lsl.w	r3, r2, r3
 80002a4:	b29b      	uxth	r3, r3
 80002a6:	4619      	mov	r1, r3
 80002a8:	4829      	ldr	r0, [pc, #164]	; (8000350 <button_reading+0xd4>)
 80002aa:	f001 fa75 	bl	8001798 <HAL_GPIO_ReadPin>
 80002ae:	4603      	mov	r3, r0
 80002b0:	4619      	mov	r1, r3
 80002b2:	4a25      	ldr	r2, [pc, #148]	; (8000348 <button_reading+0xcc>)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	4413      	add	r3, r2
 80002b8:	460a      	mov	r2, r1
 80002ba:	701a      	strb	r2, [r3, #0]

		if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 80002bc:	4a22      	ldr	r2, [pc, #136]	; (8000348 <button_reading+0xcc>)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	4413      	add	r3, r2
 80002c2:	781a      	ldrb	r2, [r3, #0]
 80002c4:	4921      	ldr	r1, [pc, #132]	; (800034c <button_reading+0xd0>)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	440b      	add	r3, r1
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	429a      	cmp	r2, r3
 80002ce:	d12f      	bne.n	8000330 <button_reading+0xb4>
		{
			buttonBuffer[i] = debounceButtonBuffer1[i];
 80002d0:	4a1d      	ldr	r2, [pc, #116]	; (8000348 <button_reading+0xcc>)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	4413      	add	r3, r2
 80002d6:	7819      	ldrb	r1, [r3, #0]
 80002d8:	4a1e      	ldr	r2, [pc, #120]	; (8000354 <button_reading+0xd8>)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	4413      	add	r3, r2
 80002de:	460a      	mov	r2, r1
 80002e0:	701a      	strb	r2, [r3, #0]
			if (buttonBuffer[i] == BUTTON_IS_PRESSED)
 80002e2:	4a1c      	ldr	r2, [pc, #112]	; (8000354 <button_reading+0xd8>)
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	4413      	add	r3, r2
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d116      	bne.n	800031c <button_reading+0xa0>
			{
				if (counterForButtonPress1s[i] < DURATION_FOR_INCREASING)
 80002ee:	4a1a      	ldr	r2, [pc, #104]	; (8000358 <button_reading+0xdc>)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002f6:	2b63      	cmp	r3, #99	; 0x63
 80002f8:	d80a      	bhi.n	8000310 <button_reading+0x94>
				{
					counterForButtonPress1s[i]++;
 80002fa:	4a17      	ldr	r2, [pc, #92]	; (8000358 <button_reading+0xdc>)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000302:	3301      	adds	r3, #1
 8000304:	b299      	uxth	r1, r3
 8000306:	4a14      	ldr	r2, [pc, #80]	; (8000358 <button_reading+0xdc>)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800030e:	e00f      	b.n	8000330 <button_reading+0xb4>
				}
				else
				{
					flagForButtonPress1s[i] = 1;
 8000310:	4a12      	ldr	r2, [pc, #72]	; (800035c <button_reading+0xe0>)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4413      	add	r3, r2
 8000316:	2201      	movs	r2, #1
 8000318:	701a      	strb	r2, [r3, #0]
 800031a:	e009      	b.n	8000330 <button_reading+0xb4>
					// TO DO
				}
			}
			else
			{
				counterForButtonPress1s[i] = 0;
 800031c:	4a0e      	ldr	r2, [pc, #56]	; (8000358 <button_reading+0xdc>)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	2100      	movs	r1, #0
 8000322:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[i] = 0;
 8000326:	4a0d      	ldr	r2, [pc, #52]	; (800035c <button_reading+0xe0>)
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	4413      	add	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NO_OF_BUTTONS; i++)
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	3301      	adds	r3, #1
 8000334:	607b      	str	r3, [r7, #4]
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	2b02      	cmp	r3, #2
 800033a:	dda5      	ble.n	8000288 <button_reading+0xc>
			}
		}
	}
}
 800033c:	bf00      	nop
 800033e:	bf00      	nop
 8000340:	3708      	adds	r7, #8
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	2000005c 	.word	0x2000005c
 800034c:	20000060 	.word	0x20000060
 8000350:	40010c00 	.word	0x40010c00
 8000354:	20000058 	.word	0x20000058
 8000358:	20000068 	.word	0x20000068
 800035c:	20000064 	.word	0x20000064

08000360 <is_button_press>:

unsigned char is_button_press(unsigned char index)
{
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
 8000366:	4603      	mov	r3, r0
 8000368:	71fb      	strb	r3, [r7, #7]
	if (index >= NO_OF_BUTTONS) return 0;
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	2b02      	cmp	r3, #2
 800036e:	d901      	bls.n	8000374 <is_button_press+0x14>
 8000370:	2300      	movs	r3, #0
 8000372:	e007      	b.n	8000384 <is_button_press+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8000374:	79fb      	ldrb	r3, [r7, #7]
 8000376:	4a06      	ldr	r2, [pc, #24]	; (8000390 <is_button_press+0x30>)
 8000378:	5cd3      	ldrb	r3, [r2, r3]
 800037a:	2b00      	cmp	r3, #0
 800037c:	bf0c      	ite	eq
 800037e:	2301      	moveq	r3, #1
 8000380:	2300      	movne	r3, #0
 8000382:	b2db      	uxtb	r3, r3
}
 8000384:	4618      	mov	r0, r3
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	bc80      	pop	{r7}
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	20000058 	.word	0x20000058

08000394 <is_button_press_1s>:

unsigned char is_button_press_1s(unsigned char index)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	71fb      	strb	r3, [r7, #7]
	if (index >= NO_OF_BUTTONS) return 0;
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	2b02      	cmp	r3, #2
 80003a2:	d901      	bls.n	80003a8 <is_button_press_1s+0x14>
 80003a4:	2300      	movs	r3, #0
 80003a6:	e007      	b.n	80003b8 <is_button_press_1s+0x24>
	return (flagForButtonPress1s[index] == 1);
 80003a8:	79fb      	ldrb	r3, [r7, #7]
 80003aa:	4a06      	ldr	r2, [pc, #24]	; (80003c4 <is_button_press_1s+0x30>)
 80003ac:	5cd3      	ldrb	r3, [r2, r3]
 80003ae:	2b01      	cmp	r3, #1
 80003b0:	bf0c      	ite	eq
 80003b2:	2301      	moveq	r3, #1
 80003b4:	2300      	movne	r3, #0
 80003b6:	b2db      	uxtb	r3, r3
}
 80003b8:	4618      	mov	r0, r3
 80003ba:	370c      	adds	r7, #12
 80003bc:	46bd      	mov	sp, r7
 80003be:	bc80      	pop	{r7}
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop
 80003c4:	20000064 	.word	0x20000064

080003c8 <system_init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void system_init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
	init_button();
 80003cc:	f7ff ff20 	bl	8000210 <init_button>
	reset_all_led();
 80003d0:	f000 fa48 	bl	8000864 <reset_all_led>
}
 80003d4:	bf00      	nop
 80003d6:	bd80      	pop	{r7, pc}

080003d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b084      	sub	sp, #16
 80003dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003de:	f000 fef1 	bl	80011c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003e2:	f000 f94d 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003e6:	f000 f9d3 	bl	8000790 <MX_GPIO_Init>
  MX_TIM2_Init();
 80003ea:	f000 f985 	bl	80006f8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80003ee:	489d      	ldr	r0, [pc, #628]	; (8000664 <main+0x28c>)
 80003f0:	f001 fe46 	bl	8002080 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  enum SystemsState {NORMAL_MODE, MODIFY_RED, UPDATE_RED_COUNTER, AUTO_UPDATE_RED_COUNTER
	  , MODIFY_YELLOW, UPDATE_YELLOW_COUNTER, AUTO_UPDATE_YELLOW_COUNTER
	  , MODIFY_GREEN, UPDATE_GREEN_COUNTER, AUTO_UPDATE_GREEN_COUNTER, SET_VALUE};

  enum SystemsState systemsState = NORMAL_MODE;
 80003f4:	2300      	movs	r3, #0
 80003f6:	73fb      	strb	r3, [r7, #15]
  int counter_temp = red_counter;
 80003f8:	4b9b      	ldr	r3, [pc, #620]	; (8000668 <main+0x290>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	60bb      	str	r3, [r7, #8]
  enum TraficLight traficLight = RED;
 80003fe:	2300      	movs	r3, #0
 8000400:	71fb      	strb	r3, [r7, #7]

  system_init();
 8000402:	f7ff ffe1 	bl	80003c8 <system_init>
  while (1)
  {
	  fsm_for_input_processing(0); // Button SELECT_MODE
 8000406:	2000      	movs	r0, #0
 8000408:	f7ff fea0 	bl	800014c <fsm_for_input_processing>
	  fsm_for_input_processing(1); // Button MODIFY_MODE
 800040c:	2001      	movs	r0, #1
 800040e:	f7ff fe9d 	bl	800014c <fsm_for_input_processing>
	  fsm_for_input_processing(2); // Button SELECT_VALUE
 8000412:	2002      	movs	r0, #2
 8000414:	f7ff fe9a 	bl	800014c <fsm_for_input_processing>
	  switch(systemsState)
 8000418:	7bfb      	ldrb	r3, [r7, #15]
 800041a:	2b0a      	cmp	r3, #10
 800041c:	f200 8114 	bhi.w	8000648 <main+0x270>
 8000420:	a201      	add	r2, pc, #4	; (adr r2, 8000428 <main+0x50>)
 8000422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000426:	bf00      	nop
 8000428:	08000455 	.word	0x08000455
 800042c:	08000487 	.word	0x08000487
 8000430:	080004f5 	.word	0x080004f5
 8000434:	0800051b 	.word	0x0800051b
 8000438:	08000555 	.word	0x08000555
 800043c:	080005bd 	.word	0x080005bd
 8000440:	080005e1 	.word	0x080005e1
 8000444:	0800061b 	.word	0x0800061b
 8000448:	08000649 	.word	0x08000649
 800044c:	08000649 	.word	0x08000649
 8000450:	08000649 	.word	0x08000649
	  {
	  case NORMAL_MODE:
		  display_trafic_light();
 8000454:	f000 fb58 	bl	8000b08 <display_trafic_light>
		  if (buttonState[0] == BUTTON_PRESSED && pressed_flag[0] == 0)
 8000458:	4b84      	ldr	r3, [pc, #528]	; (800066c <main+0x294>)
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	2b00      	cmp	r3, #0
 800045e:	f040 80f5 	bne.w	800064c <main+0x274>
 8000462:	4b83      	ldr	r3, [pc, #524]	; (8000670 <main+0x298>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	f040 80f0 	bne.w	800064c <main+0x274>
		  {
			  systemsState = MODIFY_RED;
 800046c:	2301      	movs	r3, #1
 800046e:	73fb      	strb	r3, [r7, #15]
			  traficLight = RED;
 8000470:	2300      	movs	r3, #0
 8000472:	71fb      	strb	r3, [r7, #7]
			  counter_temp = red_counter;
 8000474:	4b7c      	ldr	r3, [pc, #496]	; (8000668 <main+0x290>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	60bb      	str	r3, [r7, #8]
			  pressed_flag[0] = 1;
 800047a:	4b7d      	ldr	r3, [pc, #500]	; (8000670 <main+0x298>)
 800047c:	2201      	movs	r2, #1
 800047e:	601a      	str	r2, [r3, #0]
			  reset_blink();
 8000480:	f000 fa3a 	bl	80008f8 <reset_blink>
		  }
		  break;
 8000484:	e0e2      	b.n	800064c <main+0x274>
	  case MODIFY_RED:
		  blink_led(traficLight);
 8000486:	79fb      	ldrb	r3, [r7, #7]
 8000488:	4618      	mov	r0, r3
 800048a:	f000 fd45 	bl	8000f18 <blink_led>
		  display_mode(1);
 800048e:	2001      	movs	r0, #1
 8000490:	f000 fca6 	bl	8000de0 <display_mode>
		  display_counter(counter_temp);
 8000494:	68b8      	ldr	r0, [r7, #8]
 8000496:	f000 fce5 	bl	8000e64 <display_counter>
		  if (buttonState[0] == BUTTON_PRESSED && pressed_flag[0] == 0)
 800049a:	4b74      	ldr	r3, [pc, #464]	; (800066c <main+0x294>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d10f      	bne.n	80004c2 <main+0xea>
 80004a2:	4b73      	ldr	r3, [pc, #460]	; (8000670 <main+0x298>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d10b      	bne.n	80004c2 <main+0xea>
		  {
			  systemsState = MODIFY_YELLOW;
 80004aa:	2304      	movs	r3, #4
 80004ac:	73fb      	strb	r3, [r7, #15]
			  traficLight = YELLOW;
 80004ae:	2301      	movs	r3, #1
 80004b0:	71fb      	strb	r3, [r7, #7]
			  counter_temp = yellow_counter;
 80004b2:	4b70      	ldr	r3, [pc, #448]	; (8000674 <main+0x29c>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	60bb      	str	r3, [r7, #8]
			  pressed_flag[0] = 1;
 80004b8:	4b6d      	ldr	r3, [pc, #436]	; (8000670 <main+0x298>)
 80004ba:	2201      	movs	r2, #1
 80004bc:	601a      	str	r2, [r3, #0]
			  reset_blink();
 80004be:	f000 fa1b 	bl	80008f8 <reset_blink>
		  }
		  if (buttonState[1] == BUTTON_PRESSED && pressed_flag[1] == 0)
 80004c2:	4b6a      	ldr	r3, [pc, #424]	; (800066c <main+0x294>)
 80004c4:	785b      	ldrb	r3, [r3, #1]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	f040 80c2 	bne.w	8000650 <main+0x278>
 80004cc:	4b68      	ldr	r3, [pc, #416]	; (8000670 <main+0x298>)
 80004ce:	685b      	ldr	r3, [r3, #4]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	f040 80bd 	bne.w	8000650 <main+0x278>
		  {
			  systemsState = UPDATE_RED_COUNTER;
 80004d6:	2302      	movs	r3, #2
 80004d8:	73fb      	strb	r3, [r7, #15]
			  pressed_flag[1] = 1;
 80004da:	4b65      	ldr	r3, [pc, #404]	; (8000670 <main+0x298>)
 80004dc:	2201      	movs	r2, #1
 80004de:	605a      	str	r2, [r3, #4]
			  counter_temp++;
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	3301      	adds	r3, #1
 80004e4:	60bb      	str	r3, [r7, #8]
			  if (counter_temp >= 100)
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	2b63      	cmp	r3, #99	; 0x63
 80004ea:	f340 80b1 	ble.w	8000650 <main+0x278>
			  {
				  counter_temp = 0;
 80004ee:	2300      	movs	r3, #0
 80004f0:	60bb      	str	r3, [r7, #8]
			  }
		  }
		  break;
 80004f2:	e0ad      	b.n	8000650 <main+0x278>
	  case UPDATE_RED_COUNTER:
//		  blink_led(traficLight);
		  if (buttonState[1] == BUTTON_RELEASED)
 80004f4:	4b5d      	ldr	r3, [pc, #372]	; (800066c <main+0x294>)
 80004f6:	785b      	ldrb	r3, [r3, #1]
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d101      	bne.n	8000500 <main+0x128>
		  {
			  systemsState = MODIFY_RED;
 80004fc:	2301      	movs	r3, #1
 80004fe:	73fb      	strb	r3, [r7, #15]
		  }
		  if (buttonState[1] == BUTTON_PRESS_FOR_1S)
 8000500:	4b5a      	ldr	r3, [pc, #360]	; (800066c <main+0x294>)
 8000502:	785b      	ldrb	r3, [r3, #1]
 8000504:	2b02      	cmp	r3, #2
 8000506:	f040 80a5 	bne.w	8000654 <main+0x27c>
		  {
			  systemsState = AUTO_UPDATE_RED_COUNTER;
 800050a:	2303      	movs	r3, #3
 800050c:	73fb      	strb	r3, [r7, #15]
			  set_timer(4, DURATION_FOR_INCREASING * TIMER_CYCLE); // Auto increasing counter
 800050e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000512:	2004      	movs	r0, #4
 8000514:	f000 fdce 	bl	80010b4 <set_timer>
		  }
		  break;
 8000518:	e09c      	b.n	8000654 <main+0x27c>
	  case AUTO_UPDATE_RED_COUNTER:
		  blink_led(traficLight);
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	4618      	mov	r0, r3
 800051e:	f000 fcfb 	bl	8000f18 <blink_led>
		  display_mode(1);
 8000522:	2001      	movs	r0, #1
 8000524:	f000 fc5c 	bl	8000de0 <display_mode>
		  if (buttonState[1] == BUTTON_RELEASED)
 8000528:	4b50      	ldr	r3, [pc, #320]	; (800066c <main+0x294>)
 800052a:	785b      	ldrb	r3, [r3, #1]
 800052c:	2b01      	cmp	r3, #1
 800052e:	d101      	bne.n	8000534 <main+0x15c>
		  {
			  systemsState = MODIFY_RED;
 8000530:	2301      	movs	r3, #1
 8000532:	73fb      	strb	r3, [r7, #15]
		  }
		  if (timer_flag[4] == 1)
 8000534:	4b50      	ldr	r3, [pc, #320]	; (8000678 <main+0x2a0>)
 8000536:	691b      	ldr	r3, [r3, #16]
 8000538:	2b01      	cmp	r3, #1
 800053a:	d107      	bne.n	800054c <main+0x174>
		  {
			  counter_temp++;
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	3301      	adds	r3, #1
 8000540:	60bb      	str	r3, [r7, #8]
			  set_timer(4, DURATION_FOR_INCREASING * TIMER_CYCLE);
 8000542:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000546:	2004      	movs	r0, #4
 8000548:	f000 fdb4 	bl	80010b4 <set_timer>
		  }
		  display_counter(counter_temp);
 800054c:	68b8      	ldr	r0, [r7, #8]
 800054e:	f000 fc89 	bl	8000e64 <display_counter>
		  break;
 8000552:	e086      	b.n	8000662 <main+0x28a>
	  case MODIFY_YELLOW:
		  blink_led(traficLight);
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	4618      	mov	r0, r3
 8000558:	f000 fcde 	bl	8000f18 <blink_led>
		  display_mode(2);
 800055c:	2002      	movs	r0, #2
 800055e:	f000 fc3f 	bl	8000de0 <display_mode>
		  display_counter(counter_temp);
 8000562:	68b8      	ldr	r0, [r7, #8]
 8000564:	f000 fc7e 	bl	8000e64 <display_counter>
		  if (buttonState[0] == BUTTON_PRESSED && pressed_flag[0] == 0)
 8000568:	4b40      	ldr	r3, [pc, #256]	; (800066c <main+0x294>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d10f      	bne.n	8000590 <main+0x1b8>
 8000570:	4b3f      	ldr	r3, [pc, #252]	; (8000670 <main+0x298>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d10b      	bne.n	8000590 <main+0x1b8>
		  {
			  systemsState = MODIFY_GREEN;
 8000578:	2307      	movs	r3, #7
 800057a:	73fb      	strb	r3, [r7, #15]
			  traficLight = GREEN;
 800057c:	2302      	movs	r3, #2
 800057e:	71fb      	strb	r3, [r7, #7]
			  counter_temp = green_counter;
 8000580:	4b3e      	ldr	r3, [pc, #248]	; (800067c <main+0x2a4>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	60bb      	str	r3, [r7, #8]
			  pressed_flag[0] = 1;
 8000586:	4b3a      	ldr	r3, [pc, #232]	; (8000670 <main+0x298>)
 8000588:	2201      	movs	r2, #1
 800058a:	601a      	str	r2, [r3, #0]
			  reset_blink();
 800058c:	f000 f9b4 	bl	80008f8 <reset_blink>
		  }
		  if (buttonState[1] == BUTTON_PRESSED && pressed_flag[1] == 0)
 8000590:	4b36      	ldr	r3, [pc, #216]	; (800066c <main+0x294>)
 8000592:	785b      	ldrb	r3, [r3, #1]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d15f      	bne.n	8000658 <main+0x280>
 8000598:	4b35      	ldr	r3, [pc, #212]	; (8000670 <main+0x298>)
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d15b      	bne.n	8000658 <main+0x280>
		  {
			  systemsState = UPDATE_YELLOW_COUNTER;
 80005a0:	2305      	movs	r3, #5
 80005a2:	73fb      	strb	r3, [r7, #15]
			  pressed_flag[1] = 1;
 80005a4:	4b32      	ldr	r3, [pc, #200]	; (8000670 <main+0x298>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	605a      	str	r2, [r3, #4]
			  counter_temp++;
 80005aa:	68bb      	ldr	r3, [r7, #8]
 80005ac:	3301      	adds	r3, #1
 80005ae:	60bb      	str	r3, [r7, #8]
			  if (counter_temp >= 100)
 80005b0:	68bb      	ldr	r3, [r7, #8]
 80005b2:	2b63      	cmp	r3, #99	; 0x63
 80005b4:	dd50      	ble.n	8000658 <main+0x280>
			  {
				  counter_temp = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	60bb      	str	r3, [r7, #8]
			  }
		  }
		  break;
 80005ba:	e04d      	b.n	8000658 <main+0x280>
	  case UPDATE_YELLOW_COUNTER:
		  if (buttonState[1] == BUTTON_RELEASED)
 80005bc:	4b2b      	ldr	r3, [pc, #172]	; (800066c <main+0x294>)
 80005be:	785b      	ldrb	r3, [r3, #1]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d101      	bne.n	80005c8 <main+0x1f0>
		  {
			  systemsState = MODIFY_YELLOW;
 80005c4:	2304      	movs	r3, #4
 80005c6:	73fb      	strb	r3, [r7, #15]
		  }
		  if (buttonState[1] == BUTTON_PRESS_FOR_1S)
 80005c8:	4b28      	ldr	r3, [pc, #160]	; (800066c <main+0x294>)
 80005ca:	785b      	ldrb	r3, [r3, #1]
 80005cc:	2b02      	cmp	r3, #2
 80005ce:	d145      	bne.n	800065c <main+0x284>
		  {
			  systemsState = AUTO_UPDATE_YELLOW_COUNTER;
 80005d0:	2306      	movs	r3, #6
 80005d2:	73fb      	strb	r3, [r7, #15]
			  set_timer(4, DURATION_FOR_INCREASING * TIMER_CYCLE); // Auto increasing counter
 80005d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005d8:	2004      	movs	r0, #4
 80005da:	f000 fd6b 	bl	80010b4 <set_timer>
		  }
		  break;
 80005de:	e03d      	b.n	800065c <main+0x284>
	  case AUTO_UPDATE_YELLOW_COUNTER:
		  blink_led(traficLight);
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 fc98 	bl	8000f18 <blink_led>
		  display_mode(2);
 80005e8:	2002      	movs	r0, #2
 80005ea:	f000 fbf9 	bl	8000de0 <display_mode>
		  if (buttonState[1] == BUTTON_RELEASED)
 80005ee:	4b1f      	ldr	r3, [pc, #124]	; (800066c <main+0x294>)
 80005f0:	785b      	ldrb	r3, [r3, #1]
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d101      	bne.n	80005fa <main+0x222>
		  {
			  systemsState = MODIFY_YELLOW;
 80005f6:	2304      	movs	r3, #4
 80005f8:	73fb      	strb	r3, [r7, #15]
		  }
		  if (timer_flag[4] == 1)
 80005fa:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <main+0x2a0>)
 80005fc:	691b      	ldr	r3, [r3, #16]
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d107      	bne.n	8000612 <main+0x23a>
		  {
			  counter_temp++;
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	3301      	adds	r3, #1
 8000606:	60bb      	str	r3, [r7, #8]
			  set_timer(4, DURATION_FOR_INCREASING * TIMER_CYCLE);
 8000608:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800060c:	2004      	movs	r0, #4
 800060e:	f000 fd51 	bl	80010b4 <set_timer>
		  }
		  display_counter(counter_temp);
 8000612:	68b8      	ldr	r0, [r7, #8]
 8000614:	f000 fc26 	bl	8000e64 <display_counter>
		  break;
 8000618:	e023      	b.n	8000662 <main+0x28a>
	  case MODIFY_GREEN:
		  blink_led(traficLight);
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	4618      	mov	r0, r3
 800061e:	f000 fc7b 	bl	8000f18 <blink_led>
		  display_mode(3);
 8000622:	2003      	movs	r0, #3
 8000624:	f000 fbdc 	bl	8000de0 <display_mode>
		  if (buttonState[0] == BUTTON_PRESSED && pressed_flag[0] == 0)
 8000628:	4b10      	ldr	r3, [pc, #64]	; (800066c <main+0x294>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d117      	bne.n	8000660 <main+0x288>
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <main+0x298>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d113      	bne.n	8000660 <main+0x288>
		  {
			  systemsState = NORMAL_MODE;
 8000638:	2300      	movs	r3, #0
 800063a:	73fb      	strb	r3, [r7, #15]
			  pressed_flag[0] = 1;
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <main+0x298>)
 800063e:	2201      	movs	r2, #1
 8000640:	601a      	str	r2, [r3, #0]
			  reset_all_led();
 8000642:	f000 f90f 	bl	8000864 <reset_all_led>
		  }
		  break;
 8000646:	e00b      	b.n	8000660 <main+0x288>
	  case AUTO_UPDATE_GREEN_COUNTER:
		  break;
	  case SET_VALUE:
		  break;
	  default:
		  break;
 8000648:	bf00      	nop
 800064a:	e6dc      	b.n	8000406 <main+0x2e>
		  break;
 800064c:	bf00      	nop
 800064e:	e6da      	b.n	8000406 <main+0x2e>
		  break;
 8000650:	bf00      	nop
 8000652:	e6d8      	b.n	8000406 <main+0x2e>
		  break;
 8000654:	bf00      	nop
 8000656:	e6d6      	b.n	8000406 <main+0x2e>
		  break;
 8000658:	bf00      	nop
 800065a:	e6d4      	b.n	8000406 <main+0x2e>
		  break;
 800065c:	bf00      	nop
 800065e:	e6d2      	b.n	8000406 <main+0x2e>
		  break;
 8000660:	bf00      	nop
	  fsm_for_input_processing(0); // Button SELECT_MODE
 8000662:	e6d0      	b.n	8000406 <main+0x2e>
 8000664:	200000a4 	.word	0x200000a4
 8000668:	20000018 	.word	0x20000018
 800066c:	200000a0 	.word	0x200000a0
 8000670:	2000004c 	.word	0x2000004c
 8000674:	2000001c 	.word	0x2000001c
 8000678:	2000008c 	.word	0x2000008c
 800067c:	20000020 	.word	0x20000020

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b090      	sub	sp, #64	; 0x40
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0318 	add.w	r3, r7, #24
 800068a:	2228      	movs	r2, #40	; 0x28
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f002 f8a6 	bl	80027e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a2:	2302      	movs	r3, #2
 80006a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a6:	2301      	movs	r3, #1
 80006a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006aa:	2310      	movs	r3, #16
 80006ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006ae:	2300      	movs	r3, #0
 80006b0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b2:	f107 0318 	add.w	r3, r7, #24
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 f8b6 	bl	8001828 <HAL_RCC_OscConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80006c2:	f000 f8c9 	bl	8000858 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c6:	230f      	movs	r3, #15
 80006c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 fb22 	bl	8001d28 <HAL_RCC_ClockConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80006ea:	f000 f8b5 	bl	8000858 <Error_Handler>
  }
}
 80006ee:	bf00      	nop
 80006f0:	3740      	adds	r7, #64	; 0x40
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006fe:	f107 0308 	add.w	r3, r7, #8
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800070c:	463b      	mov	r3, r7
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000714:	4b1d      	ldr	r3, [pc, #116]	; (800078c <MX_TIM2_Init+0x94>)
 8000716:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800071a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800071c:	4b1b      	ldr	r3, [pc, #108]	; (800078c <MX_TIM2_Init+0x94>)
 800071e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000722:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000724:	4b19      	ldr	r3, [pc, #100]	; (800078c <MX_TIM2_Init+0x94>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800072a:	4b18      	ldr	r3, [pc, #96]	; (800078c <MX_TIM2_Init+0x94>)
 800072c:	2209      	movs	r2, #9
 800072e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000730:	4b16      	ldr	r3, [pc, #88]	; (800078c <MX_TIM2_Init+0x94>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000736:	4b15      	ldr	r3, [pc, #84]	; (800078c <MX_TIM2_Init+0x94>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800073c:	4813      	ldr	r0, [pc, #76]	; (800078c <MX_TIM2_Init+0x94>)
 800073e:	f001 fc4f 	bl	8001fe0 <HAL_TIM_Base_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000748:	f000 f886 	bl	8000858 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800074c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000750:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000752:	f107 0308 	add.w	r3, r7, #8
 8000756:	4619      	mov	r1, r3
 8000758:	480c      	ldr	r0, [pc, #48]	; (800078c <MX_TIM2_Init+0x94>)
 800075a:	f001 fdcd 	bl	80022f8 <HAL_TIM_ConfigClockSource>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000764:	f000 f878 	bl	8000858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000768:	2300      	movs	r3, #0
 800076a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800076c:	2300      	movs	r3, #0
 800076e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000770:	463b      	mov	r3, r7
 8000772:	4619      	mov	r1, r3
 8000774:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_TIM2_Init+0x94>)
 8000776:	f001 ffa5 	bl	80026c4 <HAL_TIMEx_MasterConfigSynchronization>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000780:	f000 f86a 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	3718      	adds	r7, #24
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	200000a4 	.word	0x200000a4

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 0308 	add.w	r3, r7, #8
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a4:	4b29      	ldr	r3, [pc, #164]	; (800084c <MX_GPIO_Init+0xbc>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	4a28      	ldr	r2, [pc, #160]	; (800084c <MX_GPIO_Init+0xbc>)
 80007aa:	f043 0304 	orr.w	r3, r3, #4
 80007ae:	6193      	str	r3, [r2, #24]
 80007b0:	4b26      	ldr	r3, [pc, #152]	; (800084c <MX_GPIO_Init+0xbc>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	f003 0304 	and.w	r3, r3, #4
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007bc:	4b23      	ldr	r3, [pc, #140]	; (800084c <MX_GPIO_Init+0xbc>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	4a22      	ldr	r2, [pc, #136]	; (800084c <MX_GPIO_Init+0xbc>)
 80007c2:	f043 0308 	orr.w	r3, r3, #8
 80007c6:	6193      	str	r3, [r2, #24]
 80007c8:	4b20      	ldr	r3, [pc, #128]	; (800084c <MX_GPIO_Init+0xbc>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	f003 0308 	and.w	r3, r3, #8
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 80007d4:	2200      	movs	r2, #0
 80007d6:	f643 71ff 	movw	r1, #16383	; 0x3fff
 80007da:	481d      	ldr	r0, [pc, #116]	; (8000850 <MX_GPIO_Init+0xc0>)
 80007dc:	f000 fff3 	bl	80017c6 <HAL_GPIO_WritePin>
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|SEG7_Pin
                          |SEG8_Pin|SEG9_Pin|SEG10_Pin|SEG11_Pin
                          |SEG12_Pin|SEG13_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED1_Pin|YELLOW1_Pin|GREEN1_Pin|EN4_Pin
 80007e0:	2200      	movs	r2, #0
 80007e2:	f240 71bf 	movw	r1, #1983	; 0x7bf
 80007e6:	481b      	ldr	r0, [pc, #108]	; (8000854 <MX_GPIO_Init+0xc4>)
 80007e8:	f000 ffed 	bl	80017c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin SEG7_Pin
                           SEG8_Pin SEG9_Pin SEG10_Pin SEG11_Pin
                           SEG12_Pin SEG13_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 80007ec:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80007f0:	60bb      	str	r3, [r7, #8]
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|SEG7_Pin
                          |SEG8_Pin|SEG9_Pin|SEG10_Pin|SEG11_Pin
                          |SEG12_Pin|SEG13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	2301      	movs	r3, #1
 80007f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fa:	2302      	movs	r3, #2
 80007fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fe:	f107 0308 	add.w	r3, r7, #8
 8000802:	4619      	mov	r1, r3
 8000804:	4812      	ldr	r0, [pc, #72]	; (8000850 <MX_GPIO_Init+0xc0>)
 8000806:	f000 fe4d 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED1_Pin YELLOW1_Pin GREEN1_Pin EN4_Pin
                           RED2_Pin YELLOW2_Pin GREEN2_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|YELLOW1_Pin|GREEN1_Pin|EN4_Pin
 800080a:	f240 73bf 	movw	r3, #1983	; 0x7bf
 800080e:	60bb      	str	r3, [r7, #8]
                          |RED2_Pin|YELLOW2_Pin|GREEN2_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000810:	2301      	movs	r3, #1
 8000812:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2302      	movs	r3, #2
 800081a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081c:	f107 0308 	add.w	r3, r7, #8
 8000820:	4619      	mov	r1, r3
 8000822:	480c      	ldr	r0, [pc, #48]	; (8000854 <MX_GPIO_Init+0xc4>)
 8000824:	f000 fe3e 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SELECT_MODE_Pin MODIFY_CYCLE_Pin SET_VALUE_Pin */
  GPIO_InitStruct.Pin = SELECT_MODE_Pin|MODIFY_CYCLE_Pin|SET_VALUE_Pin;
 8000828:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800082c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000832:	2301      	movs	r3, #1
 8000834:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000836:	f107 0308 	add.w	r3, r7, #8
 800083a:	4619      	mov	r1, r3
 800083c:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_GPIO_Init+0xc4>)
 800083e:	f000 fe31 	bl	80014a4 <HAL_GPIO_Init>

}
 8000842:	bf00      	nop
 8000844:	3718      	adds	r7, #24
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40021000 	.word	0x40021000
 8000850:	40010800 	.word	0x40010800
 8000854:	40010c00 	.word	0x40010c00

08000858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
}
 800085e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000860:	e7fe      	b.n	8000860 <Error_Handler+0x8>
	...

08000864 <reset_all_led>:

int counter1 = 0;
int counter2 = 0;

void reset_all_led(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, EN1_Pin | EN2_Pin | EN3_Pin | EN4_Pin, 1);
 8000868:	2201      	movs	r2, #1
 800086a:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 800086e:	4819      	ldr	r0, [pc, #100]	; (80008d4 <reset_all_led+0x70>)
 8000870:	f000 ffa9 	bl	80017c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, RED1_Pin | RED2_Pin | YELLOW1_Pin | YELLOW2_Pin
 8000874:	2201      	movs	r2, #1
 8000876:	213f      	movs	r1, #63	; 0x3f
 8000878:	4816      	ldr	r0, [pc, #88]	; (80008d4 <reset_all_led+0x70>)
 800087a:	f000 ffa4 	bl	80017c6 <HAL_GPIO_WritePin>
			| GREEN1_Pin | GREEN2_Pin, 1);
	counter1 = red_counter;
 800087e:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <reset_all_led+0x74>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a16      	ldr	r2, [pc, #88]	; (80008dc <reset_all_led+0x78>)
 8000884:	6013      	str	r3, [r2, #0]
	counter2 = green_counter;
 8000886:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <reset_all_led+0x7c>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a16      	ldr	r2, [pc, #88]	; (80008e4 <reset_all_led+0x80>)
 800088c:	6013      	str	r3, [r2, #0]
	traficLight1 = RED;
 800088e:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <reset_all_led+0x84>)
 8000890:	2200      	movs	r2, #0
 8000892:	701a      	strb	r2, [r3, #0]
	traficLight2 = GREEN;
 8000894:	4b15      	ldr	r3, [pc, #84]	; (80008ec <reset_all_led+0x88>)
 8000896:	2202      	movs	r2, #2
 8000898:	701a      	strb	r2, [r3, #0]
	display_mode_state1 = 1; // LED 7 segments 1,2
 800089a:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <reset_all_led+0x8c>)
 800089c:	2201      	movs	r2, #1
 800089e:	601a      	str	r2, [r3, #0]
	display_mode_state2 = 3; // LED 7 segments 3,4
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <reset_all_led+0x90>)
 80008a2:	2203      	movs	r2, #3
 80008a4:	601a      	str	r2, [r3, #0]
	set_timer(0, 500); // Timer of LED 7 segments 1, 2
 80008a6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80008aa:	2000      	movs	r0, #0
 80008ac:	f000 fc02 	bl	80010b4 <set_timer>
	set_timer(1, 500); // Timer of LED 7 segments 3, 4
 80008b0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80008b4:	2001      	movs	r0, #1
 80008b6:	f000 fbfd 	bl	80010b4 <set_timer>
	set_timer(2, 500); // Timer of trafic light (mode)
 80008ba:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80008be:	2002      	movs	r0, #2
 80008c0:	f000 fbf8 	bl	80010b4 <set_timer>
	set_timer(3, 1000); // Timer of trafic light (normal)
 80008c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008c8:	2003      	movs	r0, #3
 80008ca:	f000 fbf3 	bl	80010b4 <set_timer>
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40010c00 	.word	0x40010c00
 80008d8:	20000018 	.word	0x20000018
 80008dc:	20000070 	.word	0x20000070
 80008e0:	20000020 	.word	0x20000020
 80008e4:	20000074 	.word	0x20000074
 80008e8:	2000006e 	.word	0x2000006e
 80008ec:	20000000 	.word	0x20000000
 80008f0:	20000010 	.word	0x20000010
 80008f4:	20000014 	.word	0x20000014

080008f8 <reset_blink>:

void reset_blink(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, RED1_Pin | RED2_Pin | YELLOW1_Pin | YELLOW2_Pin
 80008fc:	2201      	movs	r2, #1
 80008fe:	213f      	movs	r1, #63	; 0x3f
 8000900:	480f      	ldr	r0, [pc, #60]	; (8000940 <reset_blink+0x48>)
 8000902:	f000 ff60 	bl	80017c6 <HAL_GPIO_WritePin>
				| GREEN1_Pin | GREEN2_Pin, 1);
	HAL_GPIO_WritePin(GPIOB, EN1_Pin | EN2_Pin | EN3_Pin | EN4_Pin, 1);
 8000906:	2201      	movs	r2, #1
 8000908:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 800090c:	480c      	ldr	r0, [pc, #48]	; (8000940 <reset_blink+0x48>)
 800090e:	f000 ff5a 	bl	80017c6 <HAL_GPIO_WritePin>
	display_mode_state1 = 1; // LED 7 segments 1,2
 8000912:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <reset_blink+0x4c>)
 8000914:	2201      	movs	r2, #1
 8000916:	601a      	str	r2, [r3, #0]
	display_mode_state2 = 3; // LED 7 segments 3,4
 8000918:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <reset_blink+0x50>)
 800091a:	2203      	movs	r2, #3
 800091c:	601a      	str	r2, [r3, #0]
	set_timer(0, 500);
 800091e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000922:	2000      	movs	r0, #0
 8000924:	f000 fbc6 	bl	80010b4 <set_timer>
	set_timer(1, 500);
 8000928:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800092c:	2001      	movs	r0, #1
 800092e:	f000 fbc1 	bl	80010b4 <set_timer>
	set_timer(2, 500);
 8000932:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000936:	2002      	movs	r0, #2
 8000938:	f000 fbbc 	bl	80010b4 <set_timer>
}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40010c00 	.word	0x40010c00
 8000944:	20000010 	.word	0x20000010
 8000948:	20000014 	.word	0x20000014

0800094c <display7SEG1>:

void display7SEG1(int num)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, (led7seg[num] >> 0) & 1);
 8000954:	4a31      	ldr	r2, [pc, #196]	; (8000a1c <display7SEG1+0xd0>)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4413      	add	r3, r2
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	f003 0301 	and.w	r3, r3, #1
 8000960:	b2db      	uxtb	r3, r3
 8000962:	461a      	mov	r2, r3
 8000964:	2101      	movs	r1, #1
 8000966:	482e      	ldr	r0, [pc, #184]	; (8000a20 <display7SEG1+0xd4>)
 8000968:	f000 ff2d 	bl	80017c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, (led7seg[num] >> 1) & 1);
 800096c:	4a2b      	ldr	r2, [pc, #172]	; (8000a1c <display7SEG1+0xd0>)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4413      	add	r3, r2
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	b2db      	uxtb	r3, r3
 8000978:	f003 0301 	and.w	r3, r3, #1
 800097c:	b2db      	uxtb	r3, r3
 800097e:	461a      	mov	r2, r3
 8000980:	2102      	movs	r1, #2
 8000982:	4827      	ldr	r0, [pc, #156]	; (8000a20 <display7SEG1+0xd4>)
 8000984:	f000 ff1f 	bl	80017c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, (led7seg[num] >> 2) & 1);
 8000988:	4a24      	ldr	r2, [pc, #144]	; (8000a1c <display7SEG1+0xd0>)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4413      	add	r3, r2
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	089b      	lsrs	r3, r3, #2
 8000992:	b2db      	uxtb	r3, r3
 8000994:	f003 0301 	and.w	r3, r3, #1
 8000998:	b2db      	uxtb	r3, r3
 800099a:	461a      	mov	r2, r3
 800099c:	2104      	movs	r1, #4
 800099e:	4820      	ldr	r0, [pc, #128]	; (8000a20 <display7SEG1+0xd4>)
 80009a0:	f000 ff11 	bl	80017c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, (led7seg[num] >> 3) & 1);
 80009a4:	4a1d      	ldr	r2, [pc, #116]	; (8000a1c <display7SEG1+0xd0>)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4413      	add	r3, r2
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	08db      	lsrs	r3, r3, #3
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	f003 0301 	and.w	r3, r3, #1
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	461a      	mov	r2, r3
 80009b8:	2108      	movs	r1, #8
 80009ba:	4819      	ldr	r0, [pc, #100]	; (8000a20 <display7SEG1+0xd4>)
 80009bc:	f000 ff03 	bl	80017c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, (led7seg[num] >> 4) & 1);
 80009c0:	4a16      	ldr	r2, [pc, #88]	; (8000a1c <display7SEG1+0xd0>)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4413      	add	r3, r2
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	091b      	lsrs	r3, r3, #4
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	f003 0301 	and.w	r3, r3, #1
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	461a      	mov	r2, r3
 80009d4:	2110      	movs	r1, #16
 80009d6:	4812      	ldr	r0, [pc, #72]	; (8000a20 <display7SEG1+0xd4>)
 80009d8:	f000 fef5 	bl	80017c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, (led7seg[num] >> 5) & 1);
 80009dc:	4a0f      	ldr	r2, [pc, #60]	; (8000a1c <display7SEG1+0xd0>)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4413      	add	r3, r2
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	095b      	lsrs	r3, r3, #5
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	461a      	mov	r2, r3
 80009f0:	2120      	movs	r1, #32
 80009f2:	480b      	ldr	r0, [pc, #44]	; (8000a20 <display7SEG1+0xd4>)
 80009f4:	f000 fee7 	bl	80017c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, (led7seg[num] >> 6) & 1);
 80009f8:	4a08      	ldr	r2, [pc, #32]	; (8000a1c <display7SEG1+0xd0>)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4413      	add	r3, r2
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	099b      	lsrs	r3, r3, #6
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	f003 0301 	and.w	r3, r3, #1
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	2140      	movs	r1, #64	; 0x40
 8000a0e:	4804      	ldr	r0, [pc, #16]	; (8000a20 <display7SEG1+0xd4>)
 8000a10:	f000 fed9 	bl	80017c6 <HAL_GPIO_WritePin>
}
 8000a14:	bf00      	nop
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000004 	.word	0x20000004
 8000a20:	40010800 	.word	0x40010800

08000a24 <display7SEG2>:

void display7SEG2(int num)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, (led7seg[num] >> 0) & 1);
 8000a2c:	4a34      	ldr	r2, [pc, #208]	; (8000b00 <display7SEG2+0xdc>)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4413      	add	r3, r2
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	f003 0301 	and.w	r3, r3, #1
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	2180      	movs	r1, #128	; 0x80
 8000a3e:	4831      	ldr	r0, [pc, #196]	; (8000b04 <display7SEG2+0xe0>)
 8000a40:	f000 fec1 	bl	80017c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, (led7seg[num] >> 1) & 1);
 8000a44:	4a2e      	ldr	r2, [pc, #184]	; (8000b00 <display7SEG2+0xdc>)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4413      	add	r3, r2
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	085b      	lsrs	r3, r3, #1
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	f003 0301 	and.w	r3, r3, #1
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	461a      	mov	r2, r3
 8000a58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a5c:	4829      	ldr	r0, [pc, #164]	; (8000b04 <display7SEG2+0xe0>)
 8000a5e:	f000 feb2 	bl	80017c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, (led7seg[num] >> 2) & 1);
 8000a62:	4a27      	ldr	r2, [pc, #156]	; (8000b00 <display7SEG2+0xdc>)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4413      	add	r3, r2
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	089b      	lsrs	r3, r3, #2
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	461a      	mov	r2, r3
 8000a76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a7a:	4822      	ldr	r0, [pc, #136]	; (8000b04 <display7SEG2+0xe0>)
 8000a7c:	f000 fea3 	bl	80017c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, (led7seg[num] >> 3) & 1);
 8000a80:	4a1f      	ldr	r2, [pc, #124]	; (8000b00 <display7SEG2+0xdc>)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4413      	add	r3, r2
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	08db      	lsrs	r3, r3, #3
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	f003 0301 	and.w	r3, r3, #1
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	461a      	mov	r2, r3
 8000a94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a98:	481a      	ldr	r0, [pc, #104]	; (8000b04 <display7SEG2+0xe0>)
 8000a9a:	f000 fe94 	bl	80017c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, (led7seg[num] >> 4) & 1);
 8000a9e:	4a18      	ldr	r2, [pc, #96]	; (8000b00 <display7SEG2+0xdc>)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	091b      	lsrs	r3, r3, #4
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ab6:	4813      	ldr	r0, [pc, #76]	; (8000b04 <display7SEG2+0xe0>)
 8000ab8:	f000 fe85 	bl	80017c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, (led7seg[num] >> 5) & 1);
 8000abc:	4a10      	ldr	r2, [pc, #64]	; (8000b00 <display7SEG2+0xdc>)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	095b      	lsrs	r3, r3, #5
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	f003 0301 	and.w	r3, r3, #1
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	461a      	mov	r2, r3
 8000ad0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ad4:	480b      	ldr	r0, [pc, #44]	; (8000b04 <display7SEG2+0xe0>)
 8000ad6:	f000 fe76 	bl	80017c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, (led7seg[num] >> 6) & 1);
 8000ada:	4a09      	ldr	r2, [pc, #36]	; (8000b00 <display7SEG2+0xdc>)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4413      	add	r3, r2
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	099b      	lsrs	r3, r3, #6
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	461a      	mov	r2, r3
 8000aee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000af2:	4804      	ldr	r0, [pc, #16]	; (8000b04 <display7SEG2+0xe0>)
 8000af4:	f000 fe67 	bl	80017c6 <HAL_GPIO_WritePin>
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000004 	.word	0x20000004
 8000b04:	40010800 	.word	0x40010800

08000b08 <display_trafic_light>:

void display_trafic_light(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
	if (timer_flag[0] == 1)
 8000b0c:	4ba8      	ldr	r3, [pc, #672]	; (8000db0 <display_trafic_light+0x2a8>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d149      	bne.n	8000ba8 <display_trafic_light+0xa0>
	{
		switch(display_mode_state1)
 8000b14:	4ba7      	ldr	r3, [pc, #668]	; (8000db4 <display_trafic_light+0x2ac>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d002      	beq.n	8000b22 <display_trafic_light+0x1a>
 8000b1c:	2b02      	cmp	r3, #2
 8000b1e:	d01a      	beq.n	8000b56 <display_trafic_light+0x4e>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
			display_mode_state1 = 1;
			counter1--;
			break;
		default:
			break;
 8000b20:	e03d      	b.n	8000b9e <display_trafic_light+0x96>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000b22:	2201      	movs	r2, #1
 8000b24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b28:	48a3      	ldr	r0, [pc, #652]	; (8000db8 <display_trafic_light+0x2b0>)
 8000b2a:	f000 fe4c 	bl	80017c6 <HAL_GPIO_WritePin>
			display7SEG1(counter1 / 10);
 8000b2e:	4ba3      	ldr	r3, [pc, #652]	; (8000dbc <display_trafic_light+0x2b4>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4aa3      	ldr	r2, [pc, #652]	; (8000dc0 <display_trafic_light+0x2b8>)
 8000b34:	fb82 1203 	smull	r1, r2, r2, r3
 8000b38:	1092      	asrs	r2, r2, #2
 8000b3a:	17db      	asrs	r3, r3, #31
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff ff04 	bl	800094c <display7SEG1>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 8000b44:	2200      	movs	r2, #0
 8000b46:	2180      	movs	r1, #128	; 0x80
 8000b48:	489b      	ldr	r0, [pc, #620]	; (8000db8 <display_trafic_light+0x2b0>)
 8000b4a:	f000 fe3c 	bl	80017c6 <HAL_GPIO_WritePin>
			display_mode_state1 = 2;
 8000b4e:	4b99      	ldr	r3, [pc, #612]	; (8000db4 <display_trafic_light+0x2ac>)
 8000b50:	2202      	movs	r2, #2
 8000b52:	601a      	str	r2, [r3, #0]
			break;
 8000b54:	e023      	b.n	8000b9e <display_trafic_light+0x96>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000b56:	2201      	movs	r2, #1
 8000b58:	2180      	movs	r1, #128	; 0x80
 8000b5a:	4897      	ldr	r0, [pc, #604]	; (8000db8 <display_trafic_light+0x2b0>)
 8000b5c:	f000 fe33 	bl	80017c6 <HAL_GPIO_WritePin>
			display7SEG1(counter1 % 10);
 8000b60:	4b96      	ldr	r3, [pc, #600]	; (8000dbc <display_trafic_light+0x2b4>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	4b96      	ldr	r3, [pc, #600]	; (8000dc0 <display_trafic_light+0x2b8>)
 8000b66:	fb83 1302 	smull	r1, r3, r3, r2
 8000b6a:	1099      	asrs	r1, r3, #2
 8000b6c:	17d3      	asrs	r3, r2, #31
 8000b6e:	1ac9      	subs	r1, r1, r3
 8000b70:	460b      	mov	r3, r1
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	440b      	add	r3, r1
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	1ad1      	subs	r1, r2, r3
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	f7ff fee6 	bl	800094c <display7SEG1>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 8000b80:	2200      	movs	r2, #0
 8000b82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b86:	488c      	ldr	r0, [pc, #560]	; (8000db8 <display_trafic_light+0x2b0>)
 8000b88:	f000 fe1d 	bl	80017c6 <HAL_GPIO_WritePin>
			display_mode_state1 = 1;
 8000b8c:	4b89      	ldr	r3, [pc, #548]	; (8000db4 <display_trafic_light+0x2ac>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	601a      	str	r2, [r3, #0]
			counter1--;
 8000b92:	4b8a      	ldr	r3, [pc, #552]	; (8000dbc <display_trafic_light+0x2b4>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	3b01      	subs	r3, #1
 8000b98:	4a88      	ldr	r2, [pc, #544]	; (8000dbc <display_trafic_light+0x2b4>)
 8000b9a:	6013      	str	r3, [r2, #0]
			break;
 8000b9c:	bf00      	nop
		}
		set_timer(0, 500);
 8000b9e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f000 fa86 	bl	80010b4 <set_timer>
	}

	if (timer_flag[1] == 1)
 8000ba8:	4b81      	ldr	r3, [pc, #516]	; (8000db0 <display_trafic_light+0x2a8>)
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d14b      	bne.n	8000c48 <display_trafic_light+0x140>
	{
		switch(display_mode_state2)
 8000bb0:	4b84      	ldr	r3, [pc, #528]	; (8000dc4 <display_trafic_light+0x2bc>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b03      	cmp	r3, #3
 8000bb6:	d002      	beq.n	8000bbe <display_trafic_light+0xb6>
 8000bb8:	2b04      	cmp	r3, #4
 8000bba:	d01b      	beq.n	8000bf4 <display_trafic_light+0xec>
			HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, 0);
			display_mode_state2 = 3;
			counter2--;
			break;
		default:
			break;
 8000bbc:	e03f      	b.n	8000c3e <display_trafic_light+0x136>
			HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, 1);
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bc4:	487c      	ldr	r0, [pc, #496]	; (8000db8 <display_trafic_light+0x2b0>)
 8000bc6:	f000 fdfe 	bl	80017c6 <HAL_GPIO_WritePin>
			display7SEG2(counter2 / 10);
 8000bca:	4b7f      	ldr	r3, [pc, #508]	; (8000dc8 <display_trafic_light+0x2c0>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a7c      	ldr	r2, [pc, #496]	; (8000dc0 <display_trafic_light+0x2b8>)
 8000bd0:	fb82 1203 	smull	r1, r2, r2, r3
 8000bd4:	1092      	asrs	r2, r2, #2
 8000bd6:	17db      	asrs	r3, r3, #31
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff ff22 	bl	8000a24 <display7SEG2>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000be6:	4874      	ldr	r0, [pc, #464]	; (8000db8 <display_trafic_light+0x2b0>)
 8000be8:	f000 fded 	bl	80017c6 <HAL_GPIO_WritePin>
			display_mode_state2 = 4;
 8000bec:	4b75      	ldr	r3, [pc, #468]	; (8000dc4 <display_trafic_light+0x2bc>)
 8000bee:	2204      	movs	r2, #4
 8000bf0:	601a      	str	r2, [r3, #0]
			break;
 8000bf2:	e024      	b.n	8000c3e <display_trafic_light+0x136>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bfa:	486f      	ldr	r0, [pc, #444]	; (8000db8 <display_trafic_light+0x2b0>)
 8000bfc:	f000 fde3 	bl	80017c6 <HAL_GPIO_WritePin>
			display7SEG2(counter2 % 10);
 8000c00:	4b71      	ldr	r3, [pc, #452]	; (8000dc8 <display_trafic_light+0x2c0>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	4b6e      	ldr	r3, [pc, #440]	; (8000dc0 <display_trafic_light+0x2b8>)
 8000c06:	fb83 1302 	smull	r1, r3, r3, r2
 8000c0a:	1099      	asrs	r1, r3, #2
 8000c0c:	17d3      	asrs	r3, r2, #31
 8000c0e:	1ac9      	subs	r1, r1, r3
 8000c10:	460b      	mov	r3, r1
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	440b      	add	r3, r1
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	1ad1      	subs	r1, r2, r3
 8000c1a:	4608      	mov	r0, r1
 8000c1c:	f7ff ff02 	bl	8000a24 <display7SEG2>
			HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, 0);
 8000c20:	2200      	movs	r2, #0
 8000c22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c26:	4864      	ldr	r0, [pc, #400]	; (8000db8 <display_trafic_light+0x2b0>)
 8000c28:	f000 fdcd 	bl	80017c6 <HAL_GPIO_WritePin>
			display_mode_state2 = 3;
 8000c2c:	4b65      	ldr	r3, [pc, #404]	; (8000dc4 <display_trafic_light+0x2bc>)
 8000c2e:	2203      	movs	r2, #3
 8000c30:	601a      	str	r2, [r3, #0]
			counter2--;
 8000c32:	4b65      	ldr	r3, [pc, #404]	; (8000dc8 <display_trafic_light+0x2c0>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	4a63      	ldr	r2, [pc, #396]	; (8000dc8 <display_trafic_light+0x2c0>)
 8000c3a:	6013      	str	r3, [r2, #0]
			break;
 8000c3c:	bf00      	nop
		}
		set_timer(1, 500);
 8000c3e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000c42:	2001      	movs	r0, #1
 8000c44:	f000 fa36 	bl	80010b4 <set_timer>
	}

	if (timer_flag[3] == 1)
 8000c48:	4b59      	ldr	r3, [pc, #356]	; (8000db0 <display_trafic_light+0x2a8>)
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	f040 80ad 	bne.w	8000dac <display_trafic_light+0x2a4>
	{
		switch(traficLight1)
 8000c52:	4b5e      	ldr	r3, [pc, #376]	; (8000dcc <display_trafic_light+0x2c4>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b02      	cmp	r3, #2
 8000c58:	d032      	beq.n	8000cc0 <display_trafic_light+0x1b8>
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	dc46      	bgt.n	8000cec <display_trafic_light+0x1e4>
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d002      	beq.n	8000c68 <display_trafic_light+0x160>
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d016      	beq.n	8000c94 <display_trafic_light+0x18c>
				traficLight1 = YELLOW;
				counter1 = yellow_counter;
			}
			break;
		default:
			break;
 8000c66:	e041      	b.n	8000cec <display_trafic_light+0x1e4>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, 0);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	4852      	ldr	r0, [pc, #328]	; (8000db8 <display_trafic_light+0x2b0>)
 8000c6e:	f000 fdaa 	bl	80017c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, 1);
 8000c72:	2201      	movs	r2, #1
 8000c74:	2102      	movs	r1, #2
 8000c76:	4850      	ldr	r0, [pc, #320]	; (8000db8 <display_trafic_light+0x2b0>)
 8000c78:	f000 fda5 	bl	80017c6 <HAL_GPIO_WritePin>
			if (counter1 <= 0)
 8000c7c:	4b4f      	ldr	r3, [pc, #316]	; (8000dbc <display_trafic_light+0x2b4>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	dc35      	bgt.n	8000cf0 <display_trafic_light+0x1e8>
				traficLight1 = GREEN;
 8000c84:	4b51      	ldr	r3, [pc, #324]	; (8000dcc <display_trafic_light+0x2c4>)
 8000c86:	2202      	movs	r2, #2
 8000c88:	701a      	strb	r2, [r3, #0]
				counter1 = green_counter;
 8000c8a:	4b51      	ldr	r3, [pc, #324]	; (8000dd0 <display_trafic_light+0x2c8>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a4b      	ldr	r2, [pc, #300]	; (8000dbc <display_trafic_light+0x2b4>)
 8000c90:	6013      	str	r3, [r2, #0]
			break;
 8000c92:	e02d      	b.n	8000cf0 <display_trafic_light+0x1e8>
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, 0);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2102      	movs	r1, #2
 8000c98:	4847      	ldr	r0, [pc, #284]	; (8000db8 <display_trafic_light+0x2b0>)
 8000c9a:	f000 fd94 	bl	80017c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, 1);
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	2104      	movs	r1, #4
 8000ca2:	4845      	ldr	r0, [pc, #276]	; (8000db8 <display_trafic_light+0x2b0>)
 8000ca4:	f000 fd8f 	bl	80017c6 <HAL_GPIO_WritePin>
			if (counter1 <= 0)
 8000ca8:	4b44      	ldr	r3, [pc, #272]	; (8000dbc <display_trafic_light+0x2b4>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	dc21      	bgt.n	8000cf4 <display_trafic_light+0x1ec>
				traficLight1 = RED;
 8000cb0:	4b46      	ldr	r3, [pc, #280]	; (8000dcc <display_trafic_light+0x2c4>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
				counter1 = red_counter;
 8000cb6:	4b47      	ldr	r3, [pc, #284]	; (8000dd4 <display_trafic_light+0x2cc>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a40      	ldr	r2, [pc, #256]	; (8000dbc <display_trafic_light+0x2b4>)
 8000cbc:	6013      	str	r3, [r2, #0]
			break;
 8000cbe:	e019      	b.n	8000cf4 <display_trafic_light+0x1ec>
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, 0);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2104      	movs	r1, #4
 8000cc4:	483c      	ldr	r0, [pc, #240]	; (8000db8 <display_trafic_light+0x2b0>)
 8000cc6:	f000 fd7e 	bl	80017c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, 1);
 8000cca:	2201      	movs	r2, #1
 8000ccc:	2101      	movs	r1, #1
 8000cce:	483a      	ldr	r0, [pc, #232]	; (8000db8 <display_trafic_light+0x2b0>)
 8000cd0:	f000 fd79 	bl	80017c6 <HAL_GPIO_WritePin>
			if (counter1 <= 0)
 8000cd4:	4b39      	ldr	r3, [pc, #228]	; (8000dbc <display_trafic_light+0x2b4>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	dc0d      	bgt.n	8000cf8 <display_trafic_light+0x1f0>
				traficLight1 = YELLOW;
 8000cdc:	4b3b      	ldr	r3, [pc, #236]	; (8000dcc <display_trafic_light+0x2c4>)
 8000cde:	2201      	movs	r2, #1
 8000ce0:	701a      	strb	r2, [r3, #0]
				counter1 = yellow_counter;
 8000ce2:	4b3d      	ldr	r3, [pc, #244]	; (8000dd8 <display_trafic_light+0x2d0>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a35      	ldr	r2, [pc, #212]	; (8000dbc <display_trafic_light+0x2b4>)
 8000ce8:	6013      	str	r3, [r2, #0]
			break;
 8000cea:	e005      	b.n	8000cf8 <display_trafic_light+0x1f0>
			break;
 8000cec:	bf00      	nop
 8000cee:	e004      	b.n	8000cfa <display_trafic_light+0x1f2>
			break;
 8000cf0:	bf00      	nop
 8000cf2:	e002      	b.n	8000cfa <display_trafic_light+0x1f2>
			break;
 8000cf4:	bf00      	nop
 8000cf6:	e000      	b.n	8000cfa <display_trafic_light+0x1f2>
			break;
 8000cf8:	bf00      	nop
		}

		switch(traficLight2)
 8000cfa:	4b38      	ldr	r3, [pc, #224]	; (8000ddc <display_trafic_light+0x2d4>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d032      	beq.n	8000d68 <display_trafic_light+0x260>
 8000d02:	2b02      	cmp	r3, #2
 8000d04:	dc46      	bgt.n	8000d94 <display_trafic_light+0x28c>
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d002      	beq.n	8000d10 <display_trafic_light+0x208>
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d016      	beq.n	8000d3c <display_trafic_light+0x234>
				traficLight2 = YELLOW;
				counter2 = yellow_counter;
			}
			break;
		default:
			break;
 8000d0e:	e041      	b.n	8000d94 <display_trafic_light+0x28c>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, 0);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2108      	movs	r1, #8
 8000d14:	4828      	ldr	r0, [pc, #160]	; (8000db8 <display_trafic_light+0x2b0>)
 8000d16:	f000 fd56 	bl	80017c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, 1);
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	2110      	movs	r1, #16
 8000d1e:	4826      	ldr	r0, [pc, #152]	; (8000db8 <display_trafic_light+0x2b0>)
 8000d20:	f000 fd51 	bl	80017c6 <HAL_GPIO_WritePin>
			if (counter2 <= 0)
 8000d24:	4b28      	ldr	r3, [pc, #160]	; (8000dc8 <display_trafic_light+0x2c0>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	dc35      	bgt.n	8000d98 <display_trafic_light+0x290>
				traficLight2 = GREEN;
 8000d2c:	4b2b      	ldr	r3, [pc, #172]	; (8000ddc <display_trafic_light+0x2d4>)
 8000d2e:	2202      	movs	r2, #2
 8000d30:	701a      	strb	r2, [r3, #0]
				counter2 = green_counter;
 8000d32:	4b27      	ldr	r3, [pc, #156]	; (8000dd0 <display_trafic_light+0x2c8>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a24      	ldr	r2, [pc, #144]	; (8000dc8 <display_trafic_light+0x2c0>)
 8000d38:	6013      	str	r3, [r2, #0]
			break;
 8000d3a:	e02d      	b.n	8000d98 <display_trafic_light+0x290>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2110      	movs	r1, #16
 8000d40:	481d      	ldr	r0, [pc, #116]	; (8000db8 <display_trafic_light+0x2b0>)
 8000d42:	f000 fd40 	bl	80017c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, 1);
 8000d46:	2201      	movs	r2, #1
 8000d48:	2120      	movs	r1, #32
 8000d4a:	481b      	ldr	r0, [pc, #108]	; (8000db8 <display_trafic_light+0x2b0>)
 8000d4c:	f000 fd3b 	bl	80017c6 <HAL_GPIO_WritePin>
			if (counter2 <= 0)
 8000d50:	4b1d      	ldr	r3, [pc, #116]	; (8000dc8 <display_trafic_light+0x2c0>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	dc21      	bgt.n	8000d9c <display_trafic_light+0x294>
				traficLight2 = RED;
 8000d58:	4b20      	ldr	r3, [pc, #128]	; (8000ddc <display_trafic_light+0x2d4>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]
				counter2 = red_counter;
 8000d5e:	4b1d      	ldr	r3, [pc, #116]	; (8000dd4 <display_trafic_light+0x2cc>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a19      	ldr	r2, [pc, #100]	; (8000dc8 <display_trafic_light+0x2c0>)
 8000d64:	6013      	str	r3, [r2, #0]
			break;
 8000d66:	e019      	b.n	8000d9c <display_trafic_light+0x294>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, 0);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2120      	movs	r1, #32
 8000d6c:	4812      	ldr	r0, [pc, #72]	; (8000db8 <display_trafic_light+0x2b0>)
 8000d6e:	f000 fd2a 	bl	80017c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, 1);
 8000d72:	2201      	movs	r2, #1
 8000d74:	2108      	movs	r1, #8
 8000d76:	4810      	ldr	r0, [pc, #64]	; (8000db8 <display_trafic_light+0x2b0>)
 8000d78:	f000 fd25 	bl	80017c6 <HAL_GPIO_WritePin>
			if (counter2 <= 0)
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <display_trafic_light+0x2c0>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	dc0d      	bgt.n	8000da0 <display_trafic_light+0x298>
				traficLight2 = YELLOW;
 8000d84:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <display_trafic_light+0x2d4>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	701a      	strb	r2, [r3, #0]
				counter2 = yellow_counter;
 8000d8a:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <display_trafic_light+0x2d0>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a0e      	ldr	r2, [pc, #56]	; (8000dc8 <display_trafic_light+0x2c0>)
 8000d90:	6013      	str	r3, [r2, #0]
			break;
 8000d92:	e005      	b.n	8000da0 <display_trafic_light+0x298>
			break;
 8000d94:	bf00      	nop
 8000d96:	e004      	b.n	8000da2 <display_trafic_light+0x29a>
			break;
 8000d98:	bf00      	nop
 8000d9a:	e002      	b.n	8000da2 <display_trafic_light+0x29a>
			break;
 8000d9c:	bf00      	nop
 8000d9e:	e000      	b.n	8000da2 <display_trafic_light+0x29a>
			break;
 8000da0:	bf00      	nop
		}
		set_timer(3, 1000);
 8000da2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000da6:	2003      	movs	r0, #3
 8000da8:	f000 f984 	bl	80010b4 <set_timer>
	}
}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	2000008c 	.word	0x2000008c
 8000db4:	20000010 	.word	0x20000010
 8000db8:	40010c00 	.word	0x40010c00
 8000dbc:	20000070 	.word	0x20000070
 8000dc0:	66666667 	.word	0x66666667
 8000dc4:	20000014 	.word	0x20000014
 8000dc8:	20000074 	.word	0x20000074
 8000dcc:	2000006e 	.word	0x2000006e
 8000dd0:	20000020 	.word	0x20000020
 8000dd4:	20000018 	.word	0x20000018
 8000dd8:	2000001c 	.word	0x2000001c
 8000ddc:	20000000 	.word	0x20000000

08000de0 <display_mode>:

void display_mode(int mode)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
	if (timer_flag[0] == 1)
 8000de8:	4b1b      	ldr	r3, [pc, #108]	; (8000e58 <display_mode+0x78>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d12f      	bne.n	8000e50 <display_mode+0x70>
	{
		switch(display_mode_state1)
 8000df0:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <display_mode+0x7c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d002      	beq.n	8000dfe <display_mode+0x1e>
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d012      	beq.n	8000e22 <display_mode+0x42>
			display7SEG1(mode);
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
			display_mode_state1 = 1;
			break;
		default:
			break;
 8000dfc:	e023      	b.n	8000e46 <display_mode+0x66>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e04:	4816      	ldr	r0, [pc, #88]	; (8000e60 <display_mode+0x80>)
 8000e06:	f000 fcde 	bl	80017c6 <HAL_GPIO_WritePin>
			display7SEG1(0);
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f7ff fd9e 	bl	800094c <display7SEG1>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2180      	movs	r1, #128	; 0x80
 8000e14:	4812      	ldr	r0, [pc, #72]	; (8000e60 <display_mode+0x80>)
 8000e16:	f000 fcd6 	bl	80017c6 <HAL_GPIO_WritePin>
			display_mode_state1 = 2;
 8000e1a:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <display_mode+0x7c>)
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	601a      	str	r2, [r3, #0]
			break;
 8000e20:	e011      	b.n	8000e46 <display_mode+0x66>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000e22:	2201      	movs	r2, #1
 8000e24:	2180      	movs	r1, #128	; 0x80
 8000e26:	480e      	ldr	r0, [pc, #56]	; (8000e60 <display_mode+0x80>)
 8000e28:	f000 fccd 	bl	80017c6 <HAL_GPIO_WritePin>
			display7SEG1(mode);
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff fd8d 	bl	800094c <display7SEG1>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e38:	4809      	ldr	r0, [pc, #36]	; (8000e60 <display_mode+0x80>)
 8000e3a:	f000 fcc4 	bl	80017c6 <HAL_GPIO_WritePin>
			display_mode_state1 = 1;
 8000e3e:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <display_mode+0x7c>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	601a      	str	r2, [r3, #0]
			break;
 8000e44:	bf00      	nop
		}
		set_timer(0, 500);
 8000e46:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f000 f932 	bl	80010b4 <set_timer>
	}
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	2000008c 	.word	0x2000008c
 8000e5c:	20000010 	.word	0x20000010
 8000e60:	40010c00 	.word	0x40010c00

08000e64 <display_counter>:

void display_counter(int counter)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
	if (timer_flag[1] == 1)
 8000e6c:	4b26      	ldr	r3, [pc, #152]	; (8000f08 <display_counter+0xa4>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d144      	bne.n	8000efe <display_counter+0x9a>
	{
		switch(display_mode_state2)
 8000e74:	4b25      	ldr	r3, [pc, #148]	; (8000f0c <display_counter+0xa8>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b03      	cmp	r3, #3
 8000e7a:	d002      	beq.n	8000e82 <display_counter+0x1e>
 8000e7c:	2b04      	cmp	r3, #4
 8000e7e:	d01a      	beq.n	8000eb6 <display_counter+0x52>
			display7SEG2(counter % 10);
			HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, 0);
			display_mode_state2 = 3;
			break;
		default:
			break;
 8000e80:	e038      	b.n	8000ef4 <display_counter+0x90>
			HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, 1);
 8000e82:	2201      	movs	r2, #1
 8000e84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e88:	4821      	ldr	r0, [pc, #132]	; (8000f10 <display_counter+0xac>)
 8000e8a:	f000 fc9c 	bl	80017c6 <HAL_GPIO_WritePin>
			display7SEG2(counter / 10);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a20      	ldr	r2, [pc, #128]	; (8000f14 <display_counter+0xb0>)
 8000e92:	fb82 1203 	smull	r1, r2, r2, r3
 8000e96:	1092      	asrs	r2, r2, #2
 8000e98:	17db      	asrs	r3, r3, #31
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff fdc1 	bl	8000a24 <display7SEG2>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ea8:	4819      	ldr	r0, [pc, #100]	; (8000f10 <display_counter+0xac>)
 8000eaa:	f000 fc8c 	bl	80017c6 <HAL_GPIO_WritePin>
			display_mode_state2 = 4;
 8000eae:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <display_counter+0xa8>)
 8000eb0:	2204      	movs	r2, #4
 8000eb2:	601a      	str	r2, [r3, #0]
			break;
 8000eb4:	e01e      	b.n	8000ef4 <display_counter+0x90>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ebc:	4814      	ldr	r0, [pc, #80]	; (8000f10 <display_counter+0xac>)
 8000ebe:	f000 fc82 	bl	80017c6 <HAL_GPIO_WritePin>
			display7SEG2(counter % 10);
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <display_counter+0xb0>)
 8000ec6:	fb83 1302 	smull	r1, r3, r3, r2
 8000eca:	1099      	asrs	r1, r3, #2
 8000ecc:	17d3      	asrs	r3, r2, #31
 8000ece:	1ac9      	subs	r1, r1, r3
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	440b      	add	r3, r1
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	1ad1      	subs	r1, r2, r3
 8000eda:	4608      	mov	r0, r1
 8000edc:	f7ff fda2 	bl	8000a24 <display7SEG2>
			HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, 0);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ee6:	480a      	ldr	r0, [pc, #40]	; (8000f10 <display_counter+0xac>)
 8000ee8:	f000 fc6d 	bl	80017c6 <HAL_GPIO_WritePin>
			display_mode_state2 = 3;
 8000eec:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <display_counter+0xa8>)
 8000eee:	2203      	movs	r2, #3
 8000ef0:	601a      	str	r2, [r3, #0]
			break;
 8000ef2:	bf00      	nop
		}
		set_timer(1, 500);
 8000ef4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000ef8:	2001      	movs	r0, #1
 8000efa:	f000 f8db 	bl	80010b4 <set_timer>
	}
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	2000008c 	.word	0x2000008c
 8000f0c:	20000014 	.word	0x20000014
 8000f10:	40010c00 	.word	0x40010c00
 8000f14:	66666667 	.word	0x66666667

08000f18 <blink_led>:

void blink_led(enum TraficLight traficLight)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
	if (timer_flag[2] == 1)
 8000f22:	4b1b      	ldr	r3, [pc, #108]	; (8000f90 <blink_led+0x78>)
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d12d      	bne.n	8000f86 <blink_led+0x6e>
	{
		switch(traficLight)
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d01a      	beq.n	8000f66 <blink_led+0x4e>
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	dc22      	bgt.n	8000f7a <blink_led+0x62>
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d002      	beq.n	8000f3e <blink_led+0x26>
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d00a      	beq.n	8000f52 <blink_led+0x3a>
		case GREEN:
			HAL_GPIO_WritePin(GPIOB, YELLOW1_Pin | YELLOW2_Pin, 1);
			HAL_GPIO_TogglePin(GPIOB, GREEN1_Pin | GREEN2_Pin);
			break;
		default:
			break;
 8000f3c:	e01d      	b.n	8000f7a <blink_led+0x62>
			HAL_GPIO_WritePin(GPIOB, YELLOW1_Pin | YELLOW2_Pin
 8000f3e:	2201      	movs	r2, #1
 8000f40:	2136      	movs	r1, #54	; 0x36
 8000f42:	4814      	ldr	r0, [pc, #80]	; (8000f94 <blink_led+0x7c>)
 8000f44:	f000 fc3f 	bl	80017c6 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(GPIOB, RED1_Pin | RED2_Pin);
 8000f48:	2109      	movs	r1, #9
 8000f4a:	4812      	ldr	r0, [pc, #72]	; (8000f94 <blink_led+0x7c>)
 8000f4c:	f000 fc53 	bl	80017f6 <HAL_GPIO_TogglePin>
			break;
 8000f50:	e014      	b.n	8000f7c <blink_led+0x64>
			HAL_GPIO_WritePin(GPIOB, RED1_Pin | RED2_Pin, 1);
 8000f52:	2201      	movs	r2, #1
 8000f54:	2109      	movs	r1, #9
 8000f56:	480f      	ldr	r0, [pc, #60]	; (8000f94 <blink_led+0x7c>)
 8000f58:	f000 fc35 	bl	80017c6 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(GPIOB, YELLOW1_Pin | YELLOW2_Pin);
 8000f5c:	2112      	movs	r1, #18
 8000f5e:	480d      	ldr	r0, [pc, #52]	; (8000f94 <blink_led+0x7c>)
 8000f60:	f000 fc49 	bl	80017f6 <HAL_GPIO_TogglePin>
			break;
 8000f64:	e00a      	b.n	8000f7c <blink_led+0x64>
			HAL_GPIO_WritePin(GPIOB, YELLOW1_Pin | YELLOW2_Pin, 1);
 8000f66:	2201      	movs	r2, #1
 8000f68:	2112      	movs	r1, #18
 8000f6a:	480a      	ldr	r0, [pc, #40]	; (8000f94 <blink_led+0x7c>)
 8000f6c:	f000 fc2b 	bl	80017c6 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(GPIOB, GREEN1_Pin | GREEN2_Pin);
 8000f70:	2124      	movs	r1, #36	; 0x24
 8000f72:	4808      	ldr	r0, [pc, #32]	; (8000f94 <blink_led+0x7c>)
 8000f74:	f000 fc3f 	bl	80017f6 <HAL_GPIO_TogglePin>
			break;
 8000f78:	e000      	b.n	8000f7c <blink_led+0x64>
			break;
 8000f7a:	bf00      	nop
		}
		set_timer(2, 500);
 8000f7c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000f80:	2002      	movs	r0, #2
 8000f82:	f000 f897 	bl	80010b4 <set_timer>
	}
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	2000008c 	.word	0x2000008c
 8000f94:	40010c00 	.word	0x40010c00

08000f98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f9e:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <HAL_MspInit+0x5c>)
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	4a14      	ldr	r2, [pc, #80]	; (8000ff4 <HAL_MspInit+0x5c>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6193      	str	r3, [r2, #24]
 8000faa:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <HAL_MspInit+0x5c>)
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <HAL_MspInit+0x5c>)
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	4a0e      	ldr	r2, [pc, #56]	; (8000ff4 <HAL_MspInit+0x5c>)
 8000fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc0:	61d3      	str	r3, [r2, #28]
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <HAL_MspInit+0x5c>)
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000fce:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <HAL_MspInit+0x60>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <HAL_MspInit+0x60>)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fea:	bf00      	nop
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	40010000 	.word	0x40010000

08000ffc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800100c:	d113      	bne.n	8001036 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800100e:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <HAL_TIM_Base_MspInit+0x44>)
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	4a0b      	ldr	r2, [pc, #44]	; (8001040 <HAL_TIM_Base_MspInit+0x44>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	61d3      	str	r3, [r2, #28]
 800101a:	4b09      	ldr	r3, [pc, #36]	; (8001040 <HAL_TIM_Base_MspInit+0x44>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2100      	movs	r1, #0
 800102a:	201c      	movs	r0, #28
 800102c:	f000 fa03 	bl	8001436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001030:	201c      	movs	r0, #28
 8001032:	f000 fa1c 	bl	800146e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40021000 	.word	0x40021000

08001044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <NMI_Handler+0x4>

0800104a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800104e:	e7fe      	b.n	800104e <HardFault_Handler+0x4>

08001050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001054:	e7fe      	b.n	8001054 <MemManage_Handler+0x4>

08001056 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800105a:	e7fe      	b.n	800105a <BusFault_Handler+0x4>

0800105c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <UsageFault_Handler+0x4>

08001062 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr

0800106e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr

0800107a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr

08001086 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800108a:	f000 f8e1 	bl	8001250 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <TIM2_IRQHandler+0x10>)
 800109a:	f001 f83d 	bl	8002118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200000a4 	.word	0x200000a4

080010a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr

080010b4 <set_timer>:

int timer_counter[NO_OF_TIMERS] = {0};
int timer_flag[NO_OF_TIMERS] = {0};

void set_timer(int index, int duration)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration / TIMER_CYCLE;
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	4a09      	ldr	r2, [pc, #36]	; (80010e8 <set_timer+0x34>)
 80010c2:	fb82 1203 	smull	r1, r2, r2, r3
 80010c6:	1092      	asrs	r2, r2, #2
 80010c8:	17db      	asrs	r3, r3, #31
 80010ca:	1ad2      	subs	r2, r2, r3
 80010cc:	4907      	ldr	r1, [pc, #28]	; (80010ec <set_timer+0x38>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 80010d4:	4a06      	ldr	r2, [pc, #24]	; (80010f0 <set_timer+0x3c>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2100      	movs	r1, #0
 80010da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr
 80010e8:	66666667 	.word	0x66666667
 80010ec:	20000078 	.word	0x20000078
 80010f0:	2000008c 	.word	0x2000008c

080010f4 <timer_run>:

void timer_run()
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
	for (int i = 0; i < NO_OF_TIMERS; i++)
 80010fa:	2300      	movs	r3, #0
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	e01c      	b.n	800113a <timer_run+0x46>
	{
		if (timer_counter[i] > 0) timer_counter[i]--;
 8001100:	4a12      	ldr	r2, [pc, #72]	; (800114c <timer_run+0x58>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001108:	2b00      	cmp	r3, #0
 800110a:	dd08      	ble.n	800111e <timer_run+0x2a>
 800110c:	4a0f      	ldr	r2, [pc, #60]	; (800114c <timer_run+0x58>)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001114:	1e5a      	subs	r2, r3, #1
 8001116:	490d      	ldr	r1, [pc, #52]	; (800114c <timer_run+0x58>)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (timer_counter[i] <= 0) timer_flag[i] = 1;
 800111e:	4a0b      	ldr	r2, [pc, #44]	; (800114c <timer_run+0x58>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001126:	2b00      	cmp	r3, #0
 8001128:	dc04      	bgt.n	8001134 <timer_run+0x40>
 800112a:	4a09      	ldr	r2, [pc, #36]	; (8001150 <timer_run+0x5c>)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2101      	movs	r1, #1
 8001130:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NO_OF_TIMERS; i++)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3301      	adds	r3, #1
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b04      	cmp	r3, #4
 800113e:	dddf      	ble.n	8001100 <timer_run+0xc>
	}
}
 8001140:	bf00      	nop
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr
 800114c:	20000078 	.word	0x20000078
 8001150:	2000008c 	.word	0x2000008c

08001154 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001164:	d103      	bne.n	800116e <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		timer_run();
 8001166:	f7ff ffc5 	bl	80010f4 <timer_run>
		button_reading();
 800116a:	f7ff f887 	bl	800027c <button_reading>
	}
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001178:	f7ff ff96 	bl	80010a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800117c:	480b      	ldr	r0, [pc, #44]	; (80011ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800117e:	490c      	ldr	r1, [pc, #48]	; (80011b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001180:	4a0c      	ldr	r2, [pc, #48]	; (80011b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001184:	e002      	b.n	800118c <LoopCopyDataInit>

08001186 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001186:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001188:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800118a:	3304      	adds	r3, #4

0800118c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800118c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001190:	d3f9      	bcc.n	8001186 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001192:	4a09      	ldr	r2, [pc, #36]	; (80011b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001194:	4c09      	ldr	r4, [pc, #36]	; (80011bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001196:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001198:	e001      	b.n	800119e <LoopFillZerobss>

0800119a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800119a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800119c:	3204      	adds	r2, #4

0800119e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a0:	d3fb      	bcc.n	800119a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011a2:	f001 faf9 	bl	8002798 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011a6:	f7ff f917 	bl	80003d8 <main>
  bx lr
 80011aa:	4770      	bx	lr
  ldr r0, =_sdata
 80011ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b0:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 80011b4:	08002834 	.word	0x08002834
  ldr r2, =_sbss
 80011b8:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 80011bc:	200000f0 	.word	0x200000f0

080011c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011c0:	e7fe      	b.n	80011c0 <ADC1_2_IRQHandler>
	...

080011c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c8:	4b08      	ldr	r3, [pc, #32]	; (80011ec <HAL_Init+0x28>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a07      	ldr	r2, [pc, #28]	; (80011ec <HAL_Init+0x28>)
 80011ce:	f043 0310 	orr.w	r3, r3, #16
 80011d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d4:	2003      	movs	r0, #3
 80011d6:	f000 f923 	bl	8001420 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011da:	200f      	movs	r0, #15
 80011dc:	f000 f808 	bl	80011f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e0:	f7ff feda 	bl	8000f98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40022000 	.word	0x40022000

080011f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <HAL_InitTick+0x54>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <HAL_InitTick+0x58>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	4619      	mov	r1, r3
 8001202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001206:	fbb3 f3f1 	udiv	r3, r3, r1
 800120a:	fbb2 f3f3 	udiv	r3, r2, r3
 800120e:	4618      	mov	r0, r3
 8001210:	f000 f93b 	bl	800148a <HAL_SYSTICK_Config>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e00e      	b.n	800123c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b0f      	cmp	r3, #15
 8001222:	d80a      	bhi.n	800123a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001224:	2200      	movs	r2, #0
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	f04f 30ff 	mov.w	r0, #4294967295
 800122c:	f000 f903 	bl	8001436 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001230:	4a06      	ldr	r2, [pc, #24]	; (800124c <HAL_InitTick+0x5c>)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001236:	2300      	movs	r3, #0
 8001238:	e000      	b.n	800123c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
}
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000024 	.word	0x20000024
 8001248:	2000002c 	.word	0x2000002c
 800124c:	20000028 	.word	0x20000028

08001250 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001254:	4b05      	ldr	r3, [pc, #20]	; (800126c <HAL_IncTick+0x1c>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	461a      	mov	r2, r3
 800125a:	4b05      	ldr	r3, [pc, #20]	; (8001270 <HAL_IncTick+0x20>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4413      	add	r3, r2
 8001260:	4a03      	ldr	r2, [pc, #12]	; (8001270 <HAL_IncTick+0x20>)
 8001262:	6013      	str	r3, [r2, #0]
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr
 800126c:	2000002c 	.word	0x2000002c
 8001270:	200000ec 	.word	0x200000ec

08001274 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return uwTick;
 8001278:	4b02      	ldr	r3, [pc, #8]	; (8001284 <HAL_GetTick+0x10>)
 800127a:	681b      	ldr	r3, [r3, #0]
}
 800127c:	4618      	mov	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr
 8001284:	200000ec 	.word	0x200000ec

08001288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012a4:	4013      	ands	r3, r2
 80012a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ba:	4a04      	ldr	r2, [pc, #16]	; (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	60d3      	str	r3, [r2, #12]
}
 80012c0:	bf00      	nop
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d4:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <__NVIC_GetPriorityGrouping+0x18>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	0a1b      	lsrs	r3, r3, #8
 80012da:	f003 0307 	and.w	r3, r3, #7
}
 80012de:	4618      	mov	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	db0b      	blt.n	8001316 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	f003 021f 	and.w	r2, r3, #31
 8001304:	4906      	ldr	r1, [pc, #24]	; (8001320 <__NVIC_EnableIRQ+0x34>)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	095b      	lsrs	r3, r3, #5
 800130c:	2001      	movs	r0, #1
 800130e:	fa00 f202 	lsl.w	r2, r0, r2
 8001312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr
 8001320:	e000e100 	.word	0xe000e100

08001324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	6039      	str	r1, [r7, #0]
 800132e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001334:	2b00      	cmp	r3, #0
 8001336:	db0a      	blt.n	800134e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	b2da      	uxtb	r2, r3
 800133c:	490c      	ldr	r1, [pc, #48]	; (8001370 <__NVIC_SetPriority+0x4c>)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	0112      	lsls	r2, r2, #4
 8001344:	b2d2      	uxtb	r2, r2
 8001346:	440b      	add	r3, r1
 8001348:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800134c:	e00a      	b.n	8001364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4908      	ldr	r1, [pc, #32]	; (8001374 <__NVIC_SetPriority+0x50>)
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	3b04      	subs	r3, #4
 800135c:	0112      	lsls	r2, r2, #4
 800135e:	b2d2      	uxtb	r2, r2
 8001360:	440b      	add	r3, r1
 8001362:	761a      	strb	r2, [r3, #24]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000e100 	.word	0xe000e100
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001378:	b480      	push	{r7}
 800137a:	b089      	sub	sp, #36	; 0x24
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f1c3 0307 	rsb	r3, r3, #7
 8001392:	2b04      	cmp	r3, #4
 8001394:	bf28      	it	cs
 8001396:	2304      	movcs	r3, #4
 8001398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3304      	adds	r3, #4
 800139e:	2b06      	cmp	r3, #6
 80013a0:	d902      	bls.n	80013a8 <NVIC_EncodePriority+0x30>
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3b03      	subs	r3, #3
 80013a6:	e000      	b.n	80013aa <NVIC_EncodePriority+0x32>
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ac:	f04f 32ff 	mov.w	r2, #4294967295
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43da      	mvns	r2, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	401a      	ands	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c0:	f04f 31ff 	mov.w	r1, #4294967295
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ca:	43d9      	mvns	r1, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d0:	4313      	orrs	r3, r2
         );
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3724      	adds	r7, #36	; 0x24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr

080013dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013ec:	d301      	bcc.n	80013f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ee:	2301      	movs	r3, #1
 80013f0:	e00f      	b.n	8001412 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013f2:	4a0a      	ldr	r2, [pc, #40]	; (800141c <SysTick_Config+0x40>)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013fa:	210f      	movs	r1, #15
 80013fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001400:	f7ff ff90 	bl	8001324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001404:	4b05      	ldr	r3, [pc, #20]	; (800141c <SysTick_Config+0x40>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800140a:	4b04      	ldr	r3, [pc, #16]	; (800141c <SysTick_Config+0x40>)
 800140c:	2207      	movs	r2, #7
 800140e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	e000e010 	.word	0xe000e010

08001420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff ff2d 	bl	8001288 <__NVIC_SetPriorityGrouping>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001436:	b580      	push	{r7, lr}
 8001438:	b086      	sub	sp, #24
 800143a:	af00      	add	r7, sp, #0
 800143c:	4603      	mov	r3, r0
 800143e:	60b9      	str	r1, [r7, #8]
 8001440:	607a      	str	r2, [r7, #4]
 8001442:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001448:	f7ff ff42 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 800144c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	68b9      	ldr	r1, [r7, #8]
 8001452:	6978      	ldr	r0, [r7, #20]
 8001454:	f7ff ff90 	bl	8001378 <NVIC_EncodePriority>
 8001458:	4602      	mov	r2, r0
 800145a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800145e:	4611      	mov	r1, r2
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff5f 	bl	8001324 <__NVIC_SetPriority>
}
 8001466:	bf00      	nop
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	4603      	mov	r3, r0
 8001476:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ff35 	bl	80012ec <__NVIC_EnableIRQ>
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff ffa2 	bl	80013dc <SysTick_Config>
 8001498:	4603      	mov	r3, r0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b08b      	sub	sp, #44	; 0x2c
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014ae:	2300      	movs	r3, #0
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014b2:	2300      	movs	r3, #0
 80014b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014b6:	e148      	b.n	800174a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014b8:	2201      	movs	r2, #1
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	69fa      	ldr	r2, [r7, #28]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	f040 8137 	bne.w	8001744 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	4aa3      	ldr	r2, [pc, #652]	; (8001768 <HAL_GPIO_Init+0x2c4>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d05e      	beq.n	800159e <HAL_GPIO_Init+0xfa>
 80014e0:	4aa1      	ldr	r2, [pc, #644]	; (8001768 <HAL_GPIO_Init+0x2c4>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d875      	bhi.n	80015d2 <HAL_GPIO_Init+0x12e>
 80014e6:	4aa1      	ldr	r2, [pc, #644]	; (800176c <HAL_GPIO_Init+0x2c8>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d058      	beq.n	800159e <HAL_GPIO_Init+0xfa>
 80014ec:	4a9f      	ldr	r2, [pc, #636]	; (800176c <HAL_GPIO_Init+0x2c8>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d86f      	bhi.n	80015d2 <HAL_GPIO_Init+0x12e>
 80014f2:	4a9f      	ldr	r2, [pc, #636]	; (8001770 <HAL_GPIO_Init+0x2cc>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d052      	beq.n	800159e <HAL_GPIO_Init+0xfa>
 80014f8:	4a9d      	ldr	r2, [pc, #628]	; (8001770 <HAL_GPIO_Init+0x2cc>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d869      	bhi.n	80015d2 <HAL_GPIO_Init+0x12e>
 80014fe:	4a9d      	ldr	r2, [pc, #628]	; (8001774 <HAL_GPIO_Init+0x2d0>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d04c      	beq.n	800159e <HAL_GPIO_Init+0xfa>
 8001504:	4a9b      	ldr	r2, [pc, #620]	; (8001774 <HAL_GPIO_Init+0x2d0>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d863      	bhi.n	80015d2 <HAL_GPIO_Init+0x12e>
 800150a:	4a9b      	ldr	r2, [pc, #620]	; (8001778 <HAL_GPIO_Init+0x2d4>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d046      	beq.n	800159e <HAL_GPIO_Init+0xfa>
 8001510:	4a99      	ldr	r2, [pc, #612]	; (8001778 <HAL_GPIO_Init+0x2d4>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d85d      	bhi.n	80015d2 <HAL_GPIO_Init+0x12e>
 8001516:	2b12      	cmp	r3, #18
 8001518:	d82a      	bhi.n	8001570 <HAL_GPIO_Init+0xcc>
 800151a:	2b12      	cmp	r3, #18
 800151c:	d859      	bhi.n	80015d2 <HAL_GPIO_Init+0x12e>
 800151e:	a201      	add	r2, pc, #4	; (adr r2, 8001524 <HAL_GPIO_Init+0x80>)
 8001520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001524:	0800159f 	.word	0x0800159f
 8001528:	08001579 	.word	0x08001579
 800152c:	0800158b 	.word	0x0800158b
 8001530:	080015cd 	.word	0x080015cd
 8001534:	080015d3 	.word	0x080015d3
 8001538:	080015d3 	.word	0x080015d3
 800153c:	080015d3 	.word	0x080015d3
 8001540:	080015d3 	.word	0x080015d3
 8001544:	080015d3 	.word	0x080015d3
 8001548:	080015d3 	.word	0x080015d3
 800154c:	080015d3 	.word	0x080015d3
 8001550:	080015d3 	.word	0x080015d3
 8001554:	080015d3 	.word	0x080015d3
 8001558:	080015d3 	.word	0x080015d3
 800155c:	080015d3 	.word	0x080015d3
 8001560:	080015d3 	.word	0x080015d3
 8001564:	080015d3 	.word	0x080015d3
 8001568:	08001581 	.word	0x08001581
 800156c:	08001595 	.word	0x08001595
 8001570:	4a82      	ldr	r2, [pc, #520]	; (800177c <HAL_GPIO_Init+0x2d8>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d013      	beq.n	800159e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001576:	e02c      	b.n	80015d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	623b      	str	r3, [r7, #32]
          break;
 800157e:	e029      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	3304      	adds	r3, #4
 8001586:	623b      	str	r3, [r7, #32]
          break;
 8001588:	e024      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	3308      	adds	r3, #8
 8001590:	623b      	str	r3, [r7, #32]
          break;
 8001592:	e01f      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	330c      	adds	r3, #12
 800159a:	623b      	str	r3, [r7, #32]
          break;
 800159c:	e01a      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d102      	bne.n	80015ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015a6:	2304      	movs	r3, #4
 80015a8:	623b      	str	r3, [r7, #32]
          break;
 80015aa:	e013      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d105      	bne.n	80015c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015b4:	2308      	movs	r3, #8
 80015b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69fa      	ldr	r2, [r7, #28]
 80015bc:	611a      	str	r2, [r3, #16]
          break;
 80015be:	e009      	b.n	80015d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015c0:	2308      	movs	r3, #8
 80015c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	69fa      	ldr	r2, [r7, #28]
 80015c8:	615a      	str	r2, [r3, #20]
          break;
 80015ca:	e003      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015cc:	2300      	movs	r3, #0
 80015ce:	623b      	str	r3, [r7, #32]
          break;
 80015d0:	e000      	b.n	80015d4 <HAL_GPIO_Init+0x130>
          break;
 80015d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	2bff      	cmp	r3, #255	; 0xff
 80015d8:	d801      	bhi.n	80015de <HAL_GPIO_Init+0x13a>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	e001      	b.n	80015e2 <HAL_GPIO_Init+0x13e>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	3304      	adds	r3, #4
 80015e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	2bff      	cmp	r3, #255	; 0xff
 80015e8:	d802      	bhi.n	80015f0 <HAL_GPIO_Init+0x14c>
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	e002      	b.n	80015f6 <HAL_GPIO_Init+0x152>
 80015f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f2:	3b08      	subs	r3, #8
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	210f      	movs	r1, #15
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	fa01 f303 	lsl.w	r3, r1, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	401a      	ands	r2, r3
 8001608:	6a39      	ldr	r1, [r7, #32]
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	fa01 f303 	lsl.w	r3, r1, r3
 8001610:	431a      	orrs	r2, r3
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161e:	2b00      	cmp	r3, #0
 8001620:	f000 8090 	beq.w	8001744 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001624:	4b56      	ldr	r3, [pc, #344]	; (8001780 <HAL_GPIO_Init+0x2dc>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	4a55      	ldr	r2, [pc, #340]	; (8001780 <HAL_GPIO_Init+0x2dc>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	6193      	str	r3, [r2, #24]
 8001630:	4b53      	ldr	r3, [pc, #332]	; (8001780 <HAL_GPIO_Init+0x2dc>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800163c:	4a51      	ldr	r2, [pc, #324]	; (8001784 <HAL_GPIO_Init+0x2e0>)
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	089b      	lsrs	r3, r3, #2
 8001642:	3302      	adds	r3, #2
 8001644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001648:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164c:	f003 0303 	and.w	r3, r3, #3
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	220f      	movs	r2, #15
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	4013      	ands	r3, r2
 800165e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a49      	ldr	r2, [pc, #292]	; (8001788 <HAL_GPIO_Init+0x2e4>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d00d      	beq.n	8001684 <HAL_GPIO_Init+0x1e0>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a48      	ldr	r2, [pc, #288]	; (800178c <HAL_GPIO_Init+0x2e8>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d007      	beq.n	8001680 <HAL_GPIO_Init+0x1dc>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a47      	ldr	r2, [pc, #284]	; (8001790 <HAL_GPIO_Init+0x2ec>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d101      	bne.n	800167c <HAL_GPIO_Init+0x1d8>
 8001678:	2302      	movs	r3, #2
 800167a:	e004      	b.n	8001686 <HAL_GPIO_Init+0x1e2>
 800167c:	2303      	movs	r3, #3
 800167e:	e002      	b.n	8001686 <HAL_GPIO_Init+0x1e2>
 8001680:	2301      	movs	r3, #1
 8001682:	e000      	b.n	8001686 <HAL_GPIO_Init+0x1e2>
 8001684:	2300      	movs	r3, #0
 8001686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001688:	f002 0203 	and.w	r2, r2, #3
 800168c:	0092      	lsls	r2, r2, #2
 800168e:	4093      	lsls	r3, r2
 8001690:	68fa      	ldr	r2, [r7, #12]
 8001692:	4313      	orrs	r3, r2
 8001694:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001696:	493b      	ldr	r1, [pc, #236]	; (8001784 <HAL_GPIO_Init+0x2e0>)
 8001698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169a:	089b      	lsrs	r3, r3, #2
 800169c:	3302      	adds	r3, #2
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d006      	beq.n	80016be <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016b0:	4b38      	ldr	r3, [pc, #224]	; (8001794 <HAL_GPIO_Init+0x2f0>)
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	4937      	ldr	r1, [pc, #220]	; (8001794 <HAL_GPIO_Init+0x2f0>)
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	608b      	str	r3, [r1, #8]
 80016bc:	e006      	b.n	80016cc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016be:	4b35      	ldr	r3, [pc, #212]	; (8001794 <HAL_GPIO_Init+0x2f0>)
 80016c0:	689a      	ldr	r2, [r3, #8]
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	43db      	mvns	r3, r3
 80016c6:	4933      	ldr	r1, [pc, #204]	; (8001794 <HAL_GPIO_Init+0x2f0>)
 80016c8:	4013      	ands	r3, r2
 80016ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d006      	beq.n	80016e6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016d8:	4b2e      	ldr	r3, [pc, #184]	; (8001794 <HAL_GPIO_Init+0x2f0>)
 80016da:	68da      	ldr	r2, [r3, #12]
 80016dc:	492d      	ldr	r1, [pc, #180]	; (8001794 <HAL_GPIO_Init+0x2f0>)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	60cb      	str	r3, [r1, #12]
 80016e4:	e006      	b.n	80016f4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016e6:	4b2b      	ldr	r3, [pc, #172]	; (8001794 <HAL_GPIO_Init+0x2f0>)
 80016e8:	68da      	ldr	r2, [r3, #12]
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	4929      	ldr	r1, [pc, #164]	; (8001794 <HAL_GPIO_Init+0x2f0>)
 80016f0:	4013      	ands	r3, r2
 80016f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d006      	beq.n	800170e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001700:	4b24      	ldr	r3, [pc, #144]	; (8001794 <HAL_GPIO_Init+0x2f0>)
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	4923      	ldr	r1, [pc, #140]	; (8001794 <HAL_GPIO_Init+0x2f0>)
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	4313      	orrs	r3, r2
 800170a:	604b      	str	r3, [r1, #4]
 800170c:	e006      	b.n	800171c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800170e:	4b21      	ldr	r3, [pc, #132]	; (8001794 <HAL_GPIO_Init+0x2f0>)
 8001710:	685a      	ldr	r2, [r3, #4]
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	43db      	mvns	r3, r3
 8001716:	491f      	ldr	r1, [pc, #124]	; (8001794 <HAL_GPIO_Init+0x2f0>)
 8001718:	4013      	ands	r3, r2
 800171a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d006      	beq.n	8001736 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001728:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <HAL_GPIO_Init+0x2f0>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4919      	ldr	r1, [pc, #100]	; (8001794 <HAL_GPIO_Init+0x2f0>)
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	4313      	orrs	r3, r2
 8001732:	600b      	str	r3, [r1, #0]
 8001734:	e006      	b.n	8001744 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001736:	4b17      	ldr	r3, [pc, #92]	; (8001794 <HAL_GPIO_Init+0x2f0>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	43db      	mvns	r3, r3
 800173e:	4915      	ldr	r1, [pc, #84]	; (8001794 <HAL_GPIO_Init+0x2f0>)
 8001740:	4013      	ands	r3, r2
 8001742:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001746:	3301      	adds	r3, #1
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001750:	fa22 f303 	lsr.w	r3, r2, r3
 8001754:	2b00      	cmp	r3, #0
 8001756:	f47f aeaf 	bne.w	80014b8 <HAL_GPIO_Init+0x14>
  }
}
 800175a:	bf00      	nop
 800175c:	bf00      	nop
 800175e:	372c      	adds	r7, #44	; 0x2c
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	10320000 	.word	0x10320000
 800176c:	10310000 	.word	0x10310000
 8001770:	10220000 	.word	0x10220000
 8001774:	10210000 	.word	0x10210000
 8001778:	10120000 	.word	0x10120000
 800177c:	10110000 	.word	0x10110000
 8001780:	40021000 	.word	0x40021000
 8001784:	40010000 	.word	0x40010000
 8001788:	40010800 	.word	0x40010800
 800178c:	40010c00 	.word	0x40010c00
 8001790:	40011000 	.word	0x40011000
 8001794:	40010400 	.word	0x40010400

08001798 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	460b      	mov	r3, r1
 80017a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689a      	ldr	r2, [r3, #8]
 80017a8:	887b      	ldrh	r3, [r7, #2]
 80017aa:	4013      	ands	r3, r2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d002      	beq.n	80017b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017b0:	2301      	movs	r3, #1
 80017b2:	73fb      	strb	r3, [r7, #15]
 80017b4:	e001      	b.n	80017ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017b6:	2300      	movs	r3, #0
 80017b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr

080017c6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
 80017ce:	460b      	mov	r3, r1
 80017d0:	807b      	strh	r3, [r7, #2]
 80017d2:	4613      	mov	r3, r2
 80017d4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017d6:	787b      	ldrb	r3, [r7, #1]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d003      	beq.n	80017e4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017dc:	887a      	ldrh	r2, [r7, #2]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017e2:	e003      	b.n	80017ec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017e4:	887b      	ldrh	r3, [r7, #2]
 80017e6:	041a      	lsls	r2, r3, #16
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	611a      	str	r2, [r3, #16]
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr

080017f6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b085      	sub	sp, #20
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
 80017fe:	460b      	mov	r3, r1
 8001800:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001808:	887a      	ldrh	r2, [r7, #2]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	4013      	ands	r3, r2
 800180e:	041a      	lsls	r2, r3, #16
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	43d9      	mvns	r1, r3
 8001814:	887b      	ldrh	r3, [r7, #2]
 8001816:	400b      	ands	r3, r1
 8001818:	431a      	orrs	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	611a      	str	r2, [r3, #16]
}
 800181e:	bf00      	nop
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr

08001828 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d101      	bne.n	800183a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e26c      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b00      	cmp	r3, #0
 8001844:	f000 8087 	beq.w	8001956 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001848:	4b92      	ldr	r3, [pc, #584]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 030c 	and.w	r3, r3, #12
 8001850:	2b04      	cmp	r3, #4
 8001852:	d00c      	beq.n	800186e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001854:	4b8f      	ldr	r3, [pc, #572]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 030c 	and.w	r3, r3, #12
 800185c:	2b08      	cmp	r3, #8
 800185e:	d112      	bne.n	8001886 <HAL_RCC_OscConfig+0x5e>
 8001860:	4b8c      	ldr	r3, [pc, #560]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800186c:	d10b      	bne.n	8001886 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800186e:	4b89      	ldr	r3, [pc, #548]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d06c      	beq.n	8001954 <HAL_RCC_OscConfig+0x12c>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d168      	bne.n	8001954 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e246      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800188e:	d106      	bne.n	800189e <HAL_RCC_OscConfig+0x76>
 8001890:	4b80      	ldr	r3, [pc, #512]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a7f      	ldr	r2, [pc, #508]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800189a:	6013      	str	r3, [r2, #0]
 800189c:	e02e      	b.n	80018fc <HAL_RCC_OscConfig+0xd4>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10c      	bne.n	80018c0 <HAL_RCC_OscConfig+0x98>
 80018a6:	4b7b      	ldr	r3, [pc, #492]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a7a      	ldr	r2, [pc, #488]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	4b78      	ldr	r3, [pc, #480]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a77      	ldr	r2, [pc, #476]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	e01d      	b.n	80018fc <HAL_RCC_OscConfig+0xd4>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018c8:	d10c      	bne.n	80018e4 <HAL_RCC_OscConfig+0xbc>
 80018ca:	4b72      	ldr	r3, [pc, #456]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a71      	ldr	r2, [pc, #452]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	4b6f      	ldr	r3, [pc, #444]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a6e      	ldr	r2, [pc, #440]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	e00b      	b.n	80018fc <HAL_RCC_OscConfig+0xd4>
 80018e4:	4b6b      	ldr	r3, [pc, #428]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a6a      	ldr	r2, [pc, #424]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	4b68      	ldr	r3, [pc, #416]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a67      	ldr	r2, [pc, #412]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80018f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d013      	beq.n	800192c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001904:	f7ff fcb6 	bl	8001274 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800190c:	f7ff fcb2 	bl	8001274 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b64      	cmp	r3, #100	; 0x64
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e1fa      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800191e:	4b5d      	ldr	r3, [pc, #372]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0f0      	beq.n	800190c <HAL_RCC_OscConfig+0xe4>
 800192a:	e014      	b.n	8001956 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192c:	f7ff fca2 	bl	8001274 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001934:	f7ff fc9e 	bl	8001274 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b64      	cmp	r3, #100	; 0x64
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e1e6      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001946:	4b53      	ldr	r3, [pc, #332]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f0      	bne.n	8001934 <HAL_RCC_OscConfig+0x10c>
 8001952:	e000      	b.n	8001956 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d063      	beq.n	8001a2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001962:	4b4c      	ldr	r3, [pc, #304]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f003 030c 	and.w	r3, r3, #12
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00b      	beq.n	8001986 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800196e:	4b49      	ldr	r3, [pc, #292]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f003 030c 	and.w	r3, r3, #12
 8001976:	2b08      	cmp	r3, #8
 8001978:	d11c      	bne.n	80019b4 <HAL_RCC_OscConfig+0x18c>
 800197a:	4b46      	ldr	r3, [pc, #280]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d116      	bne.n	80019b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001986:	4b43      	ldr	r3, [pc, #268]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d005      	beq.n	800199e <HAL_RCC_OscConfig+0x176>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d001      	beq.n	800199e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e1ba      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800199e:	4b3d      	ldr	r3, [pc, #244]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	4939      	ldr	r1, [pc, #228]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b2:	e03a      	b.n	8001a2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d020      	beq.n	80019fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019bc:	4b36      	ldr	r3, [pc, #216]	; (8001a98 <HAL_RCC_OscConfig+0x270>)
 80019be:	2201      	movs	r2, #1
 80019c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c2:	f7ff fc57 	bl	8001274 <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ca:	f7ff fc53 	bl	8001274 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e19b      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019dc:	4b2d      	ldr	r3, [pc, #180]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0f0      	beq.n	80019ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e8:	4b2a      	ldr	r3, [pc, #168]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	4927      	ldr	r1, [pc, #156]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	600b      	str	r3, [r1, #0]
 80019fc:	e015      	b.n	8001a2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019fe:	4b26      	ldr	r3, [pc, #152]	; (8001a98 <HAL_RCC_OscConfig+0x270>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a04:	f7ff fc36 	bl	8001274 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a0c:	f7ff fc32 	bl	8001274 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e17a      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a1e:	4b1d      	ldr	r3, [pc, #116]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f0      	bne.n	8001a0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0308 	and.w	r3, r3, #8
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d03a      	beq.n	8001aac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d019      	beq.n	8001a72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a3e:	4b17      	ldr	r3, [pc, #92]	; (8001a9c <HAL_RCC_OscConfig+0x274>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a44:	f7ff fc16 	bl	8001274 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a4c:	f7ff fc12 	bl	8001274 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e15a      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a5e:	4b0d      	ldr	r3, [pc, #52]	; (8001a94 <HAL_RCC_OscConfig+0x26c>)
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d0f0      	beq.n	8001a4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a6a:	2001      	movs	r0, #1
 8001a6c:	f000 fa9a 	bl	8001fa4 <RCC_Delay>
 8001a70:	e01c      	b.n	8001aac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a72:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <HAL_RCC_OscConfig+0x274>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a78:	f7ff fbfc 	bl	8001274 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a7e:	e00f      	b.n	8001aa0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a80:	f7ff fbf8 	bl	8001274 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d908      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e140      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
 8001a92:	bf00      	nop
 8001a94:	40021000 	.word	0x40021000
 8001a98:	42420000 	.word	0x42420000
 8001a9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aa0:	4b9e      	ldr	r3, [pc, #632]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1e9      	bne.n	8001a80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0304 	and.w	r3, r3, #4
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 80a6 	beq.w	8001c06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aba:	2300      	movs	r3, #0
 8001abc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001abe:	4b97      	ldr	r3, [pc, #604]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10d      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aca:	4b94      	ldr	r3, [pc, #592]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	4a93      	ldr	r2, [pc, #588]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad4:	61d3      	str	r3, [r2, #28]
 8001ad6:	4b91      	ldr	r3, [pc, #580]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ade:	60bb      	str	r3, [r7, #8]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae6:	4b8e      	ldr	r3, [pc, #568]	; (8001d20 <HAL_RCC_OscConfig+0x4f8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d118      	bne.n	8001b24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001af2:	4b8b      	ldr	r3, [pc, #556]	; (8001d20 <HAL_RCC_OscConfig+0x4f8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a8a      	ldr	r2, [pc, #552]	; (8001d20 <HAL_RCC_OscConfig+0x4f8>)
 8001af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001afc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001afe:	f7ff fbb9 	bl	8001274 <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b06:	f7ff fbb5 	bl	8001274 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b64      	cmp	r3, #100	; 0x64
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e0fd      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b18:	4b81      	ldr	r3, [pc, #516]	; (8001d20 <HAL_RCC_OscConfig+0x4f8>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0f0      	beq.n	8001b06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d106      	bne.n	8001b3a <HAL_RCC_OscConfig+0x312>
 8001b2c:	4b7b      	ldr	r3, [pc, #492]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	4a7a      	ldr	r2, [pc, #488]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	6213      	str	r3, [r2, #32]
 8001b38:	e02d      	b.n	8001b96 <HAL_RCC_OscConfig+0x36e>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10c      	bne.n	8001b5c <HAL_RCC_OscConfig+0x334>
 8001b42:	4b76      	ldr	r3, [pc, #472]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001b44:	6a1b      	ldr	r3, [r3, #32]
 8001b46:	4a75      	ldr	r2, [pc, #468]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001b48:	f023 0301 	bic.w	r3, r3, #1
 8001b4c:	6213      	str	r3, [r2, #32]
 8001b4e:	4b73      	ldr	r3, [pc, #460]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	4a72      	ldr	r2, [pc, #456]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001b54:	f023 0304 	bic.w	r3, r3, #4
 8001b58:	6213      	str	r3, [r2, #32]
 8001b5a:	e01c      	b.n	8001b96 <HAL_RCC_OscConfig+0x36e>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	2b05      	cmp	r3, #5
 8001b62:	d10c      	bne.n	8001b7e <HAL_RCC_OscConfig+0x356>
 8001b64:	4b6d      	ldr	r3, [pc, #436]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	4a6c      	ldr	r2, [pc, #432]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001b6a:	f043 0304 	orr.w	r3, r3, #4
 8001b6e:	6213      	str	r3, [r2, #32]
 8001b70:	4b6a      	ldr	r3, [pc, #424]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	4a69      	ldr	r2, [pc, #420]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	6213      	str	r3, [r2, #32]
 8001b7c:	e00b      	b.n	8001b96 <HAL_RCC_OscConfig+0x36e>
 8001b7e:	4b67      	ldr	r3, [pc, #412]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001b80:	6a1b      	ldr	r3, [r3, #32]
 8001b82:	4a66      	ldr	r2, [pc, #408]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001b84:	f023 0301 	bic.w	r3, r3, #1
 8001b88:	6213      	str	r3, [r2, #32]
 8001b8a:	4b64      	ldr	r3, [pc, #400]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001b8c:	6a1b      	ldr	r3, [r3, #32]
 8001b8e:	4a63      	ldr	r2, [pc, #396]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001b90:	f023 0304 	bic.w	r3, r3, #4
 8001b94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d015      	beq.n	8001bca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b9e:	f7ff fb69 	bl	8001274 <HAL_GetTick>
 8001ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba4:	e00a      	b.n	8001bbc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba6:	f7ff fb65 	bl	8001274 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e0ab      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bbc:	4b57      	ldr	r3, [pc, #348]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0ee      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x37e>
 8001bc8:	e014      	b.n	8001bf4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bca:	f7ff fb53 	bl	8001274 <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd0:	e00a      	b.n	8001be8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd2:	f7ff fb4f 	bl	8001274 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e095      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001be8:	4b4c      	ldr	r3, [pc, #304]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1ee      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bf4:	7dfb      	ldrb	r3, [r7, #23]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d105      	bne.n	8001c06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bfa:	4b48      	ldr	r3, [pc, #288]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	4a47      	ldr	r2, [pc, #284]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001c00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 8081 	beq.w	8001d12 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c10:	4b42      	ldr	r3, [pc, #264]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 030c 	and.w	r3, r3, #12
 8001c18:	2b08      	cmp	r3, #8
 8001c1a:	d061      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d146      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c24:	4b3f      	ldr	r3, [pc, #252]	; (8001d24 <HAL_RCC_OscConfig+0x4fc>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2a:	f7ff fb23 	bl	8001274 <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c30:	e008      	b.n	8001c44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c32:	f7ff fb1f 	bl	8001274 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e067      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c44:	4b35      	ldr	r3, [pc, #212]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1f0      	bne.n	8001c32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a1b      	ldr	r3, [r3, #32]
 8001c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c58:	d108      	bne.n	8001c6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c5a:	4b30      	ldr	r3, [pc, #192]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	492d      	ldr	r1, [pc, #180]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c6c:	4b2b      	ldr	r3, [pc, #172]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a19      	ldr	r1, [r3, #32]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7c:	430b      	orrs	r3, r1
 8001c7e:	4927      	ldr	r1, [pc, #156]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c84:	4b27      	ldr	r3, [pc, #156]	; (8001d24 <HAL_RCC_OscConfig+0x4fc>)
 8001c86:	2201      	movs	r2, #1
 8001c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8a:	f7ff faf3 	bl	8001274 <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c92:	f7ff faef 	bl	8001274 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e037      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ca4:	4b1d      	ldr	r3, [pc, #116]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0f0      	beq.n	8001c92 <HAL_RCC_OscConfig+0x46a>
 8001cb0:	e02f      	b.n	8001d12 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb2:	4b1c      	ldr	r3, [pc, #112]	; (8001d24 <HAL_RCC_OscConfig+0x4fc>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb8:	f7ff fadc 	bl	8001274 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc0:	f7ff fad8 	bl	8001274 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e020      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd2:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f0      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x498>
 8001cde:	e018      	b.n	8001d12 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69db      	ldr	r3, [r3, #28]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d101      	bne.n	8001cec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e013      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cec:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <HAL_RCC_OscConfig+0x4f4>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d106      	bne.n	8001d0e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d001      	beq.n	8001d12 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e000      	b.n	8001d14 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	40007000 	.word	0x40007000
 8001d24:	42420060 	.word	0x42420060

08001d28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d101      	bne.n	8001d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e0d0      	b.n	8001ede <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d3c:	4b6a      	ldr	r3, [pc, #424]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d910      	bls.n	8001d6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4a:	4b67      	ldr	r3, [pc, #412]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f023 0207 	bic.w	r2, r3, #7
 8001d52:	4965      	ldr	r1, [pc, #404]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d5a:	4b63      	ldr	r3, [pc, #396]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d001      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e0b8      	b.n	8001ede <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d020      	beq.n	8001dba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d005      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d84:	4b59      	ldr	r3, [pc, #356]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	4a58      	ldr	r2, [pc, #352]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001d8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0308 	and.w	r3, r3, #8
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d005      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d9c:	4b53      	ldr	r3, [pc, #332]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	4a52      	ldr	r2, [pc, #328]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001da2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001da6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da8:	4b50      	ldr	r3, [pc, #320]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	494d      	ldr	r1, [pc, #308]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d040      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d107      	bne.n	8001dde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dce:	4b47      	ldr	r3, [pc, #284]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d115      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e07f      	b.n	8001ede <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d107      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de6:	4b41      	ldr	r3, [pc, #260]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d109      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e073      	b.n	8001ede <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df6:	4b3d      	ldr	r3, [pc, #244]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e06b      	b.n	8001ede <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e06:	4b39      	ldr	r3, [pc, #228]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f023 0203 	bic.w	r2, r3, #3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	4936      	ldr	r1, [pc, #216]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e18:	f7ff fa2c 	bl	8001274 <HAL_GetTick>
 8001e1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1e:	e00a      	b.n	8001e36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e20:	f7ff fa28 	bl	8001274 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e053      	b.n	8001ede <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e36:	4b2d      	ldr	r3, [pc, #180]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f003 020c 	and.w	r2, r3, #12
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d1eb      	bne.n	8001e20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e48:	4b27      	ldr	r3, [pc, #156]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d210      	bcs.n	8001e78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e56:	4b24      	ldr	r3, [pc, #144]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f023 0207 	bic.w	r2, r3, #7
 8001e5e:	4922      	ldr	r1, [pc, #136]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e66:	4b20      	ldr	r3, [pc, #128]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d001      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e032      	b.n	8001ede <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d008      	beq.n	8001e96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e84:	4b19      	ldr	r3, [pc, #100]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	4916      	ldr	r1, [pc, #88]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0308 	and.w	r3, r3, #8
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d009      	beq.n	8001eb6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ea2:	4b12      	ldr	r3, [pc, #72]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	490e      	ldr	r1, [pc, #56]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001eb6:	f000 f821 	bl	8001efc <HAL_RCC_GetSysClockFreq>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	091b      	lsrs	r3, r3, #4
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	490a      	ldr	r1, [pc, #40]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ec8:	5ccb      	ldrb	r3, [r1, r3]
 8001eca:	fa22 f303 	lsr.w	r3, r2, r3
 8001ece:	4a09      	ldr	r2, [pc, #36]	; (8001ef4 <HAL_RCC_ClockConfig+0x1cc>)
 8001ed0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ed2:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <HAL_RCC_ClockConfig+0x1d0>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff f98a 	bl	80011f0 <HAL_InitTick>

  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40022000 	.word	0x40022000
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	08002808 	.word	0x08002808
 8001ef4:	20000024 	.word	0x20000024
 8001ef8:	20000028 	.word	0x20000028

08001efc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b087      	sub	sp, #28
 8001f00:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	2300      	movs	r3, #0
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	617b      	str	r3, [r7, #20]
 8001f0e:	2300      	movs	r3, #0
 8001f10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f16:	4b1e      	ldr	r3, [pc, #120]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f003 030c 	and.w	r3, r3, #12
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d002      	beq.n	8001f2c <HAL_RCC_GetSysClockFreq+0x30>
 8001f26:	2b08      	cmp	r3, #8
 8001f28:	d003      	beq.n	8001f32 <HAL_RCC_GetSysClockFreq+0x36>
 8001f2a:	e027      	b.n	8001f7c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f2c:	4b19      	ldr	r3, [pc, #100]	; (8001f94 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f2e:	613b      	str	r3, [r7, #16]
      break;
 8001f30:	e027      	b.n	8001f82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	0c9b      	lsrs	r3, r3, #18
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	4a17      	ldr	r2, [pc, #92]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f3c:	5cd3      	ldrb	r3, [r2, r3]
 8001f3e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d010      	beq.n	8001f6c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f4a:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	0c5b      	lsrs	r3, r3, #17
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	4a11      	ldr	r2, [pc, #68]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f56:	5cd3      	ldrb	r3, [r2, r3]
 8001f58:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a0d      	ldr	r2, [pc, #52]	; (8001f94 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f5e:	fb02 f203 	mul.w	r2, r2, r3
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f68:	617b      	str	r3, [r7, #20]
 8001f6a:	e004      	b.n	8001f76 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a0c      	ldr	r2, [pc, #48]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f70:	fb02 f303 	mul.w	r3, r2, r3
 8001f74:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	613b      	str	r3, [r7, #16]
      break;
 8001f7a:	e002      	b.n	8001f82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f7c:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f7e:	613b      	str	r3, [r7, #16]
      break;
 8001f80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f82:	693b      	ldr	r3, [r7, #16]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	371c      	adds	r7, #28
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40021000 	.word	0x40021000
 8001f94:	007a1200 	.word	0x007a1200
 8001f98:	08002818 	.word	0x08002818
 8001f9c:	08002828 	.word	0x08002828
 8001fa0:	003d0900 	.word	0x003d0900

08001fa4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fac:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <RCC_Delay+0x34>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <RCC_Delay+0x38>)
 8001fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb6:	0a5b      	lsrs	r3, r3, #9
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	fb02 f303 	mul.w	r3, r2, r3
 8001fbe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fc0:	bf00      	nop
  }
  while (Delay --);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	1e5a      	subs	r2, r3, #1
 8001fc6:	60fa      	str	r2, [r7, #12]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1f9      	bne.n	8001fc0 <RCC_Delay+0x1c>
}
 8001fcc:	bf00      	nop
 8001fce:	bf00      	nop
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr
 8001fd8:	20000024 	.word	0x20000024
 8001fdc:	10624dd3 	.word	0x10624dd3

08001fe0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e041      	b.n	8002076 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d106      	bne.n	800200c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7fe fff8 	bl	8000ffc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2202      	movs	r2, #2
 8002010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3304      	adds	r3, #4
 800201c:	4619      	mov	r1, r3
 800201e:	4610      	mov	r0, r2
 8002020:	f000 fa56 	bl	80024d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
	...

08002080 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b01      	cmp	r3, #1
 8002092:	d001      	beq.n	8002098 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e035      	b.n	8002104 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2202      	movs	r2, #2
 800209c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f042 0201 	orr.w	r2, r2, #1
 80020ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a16      	ldr	r2, [pc, #88]	; (8002110 <HAL_TIM_Base_Start_IT+0x90>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d009      	beq.n	80020ce <HAL_TIM_Base_Start_IT+0x4e>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020c2:	d004      	beq.n	80020ce <HAL_TIM_Base_Start_IT+0x4e>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a12      	ldr	r2, [pc, #72]	; (8002114 <HAL_TIM_Base_Start_IT+0x94>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d111      	bne.n	80020f2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2b06      	cmp	r3, #6
 80020de:	d010      	beq.n	8002102 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 0201 	orr.w	r2, r2, #1
 80020ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020f0:	e007      	b.n	8002102 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f042 0201 	orr.w	r2, r2, #1
 8002100:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	bc80      	pop	{r7}
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	40012c00 	.word	0x40012c00
 8002114:	40000400 	.word	0x40000400

08002118 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d020      	beq.n	800217c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d01b      	beq.n	800217c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f06f 0202 	mvn.w	r2, #2
 800214c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	f003 0303 	and.w	r3, r3, #3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f998 	bl	8002498 <HAL_TIM_IC_CaptureCallback>
 8002168:	e005      	b.n	8002176 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f98b 	bl	8002486 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 f99a 	bl	80024aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	f003 0304 	and.w	r3, r3, #4
 8002182:	2b00      	cmp	r3, #0
 8002184:	d020      	beq.n	80021c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	2b00      	cmp	r3, #0
 800218e:	d01b      	beq.n	80021c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f06f 0204 	mvn.w	r2, #4
 8002198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2202      	movs	r2, #2
 800219e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f972 	bl	8002498 <HAL_TIM_IC_CaptureCallback>
 80021b4:	e005      	b.n	80021c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f965 	bl	8002486 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 f974 	bl	80024aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d020      	beq.n	8002214 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f003 0308 	and.w	r3, r3, #8
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d01b      	beq.n	8002214 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f06f 0208 	mvn.w	r2, #8
 80021e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2204      	movs	r2, #4
 80021ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f94c 	bl	8002498 <HAL_TIM_IC_CaptureCallback>
 8002200:	e005      	b.n	800220e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f93f 	bl	8002486 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f000 f94e 	bl	80024aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	f003 0310 	and.w	r3, r3, #16
 800221a:	2b00      	cmp	r3, #0
 800221c:	d020      	beq.n	8002260 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f003 0310 	and.w	r3, r3, #16
 8002224:	2b00      	cmp	r3, #0
 8002226:	d01b      	beq.n	8002260 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f06f 0210 	mvn.w	r2, #16
 8002230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2208      	movs	r2, #8
 8002236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f926 	bl	8002498 <HAL_TIM_IC_CaptureCallback>
 800224c:	e005      	b.n	800225a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 f919 	bl	8002486 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 f928 	bl	80024aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00c      	beq.n	8002284 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b00      	cmp	r3, #0
 8002272:	d007      	beq.n	8002284 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f06f 0201 	mvn.w	r2, #1
 800227c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7fe ff68 	bl	8001154 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00c      	beq.n	80022a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002294:	2b00      	cmp	r3, #0
 8002296:	d007      	beq.n	80022a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 fa6f 	bl	8002786 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00c      	beq.n	80022cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d007      	beq.n	80022cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 f8f8 	bl	80024bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	f003 0320 	and.w	r3, r3, #32
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00c      	beq.n	80022f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f003 0320 	and.w	r3, r3, #32
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d007      	beq.n	80022f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f06f 0220 	mvn.w	r2, #32
 80022e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 fa42 	bl	8002774 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022f0:	bf00      	nop
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002302:	2300      	movs	r3, #0
 8002304:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800230c:	2b01      	cmp	r3, #1
 800230e:	d101      	bne.n	8002314 <HAL_TIM_ConfigClockSource+0x1c>
 8002310:	2302      	movs	r3, #2
 8002312:	e0b4      	b.n	800247e <HAL_TIM_ConfigClockSource+0x186>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2202      	movs	r2, #2
 8002320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002332:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800233a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68ba      	ldr	r2, [r7, #8]
 8002342:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800234c:	d03e      	beq.n	80023cc <HAL_TIM_ConfigClockSource+0xd4>
 800234e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002352:	f200 8087 	bhi.w	8002464 <HAL_TIM_ConfigClockSource+0x16c>
 8002356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800235a:	f000 8086 	beq.w	800246a <HAL_TIM_ConfigClockSource+0x172>
 800235e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002362:	d87f      	bhi.n	8002464 <HAL_TIM_ConfigClockSource+0x16c>
 8002364:	2b70      	cmp	r3, #112	; 0x70
 8002366:	d01a      	beq.n	800239e <HAL_TIM_ConfigClockSource+0xa6>
 8002368:	2b70      	cmp	r3, #112	; 0x70
 800236a:	d87b      	bhi.n	8002464 <HAL_TIM_ConfigClockSource+0x16c>
 800236c:	2b60      	cmp	r3, #96	; 0x60
 800236e:	d050      	beq.n	8002412 <HAL_TIM_ConfigClockSource+0x11a>
 8002370:	2b60      	cmp	r3, #96	; 0x60
 8002372:	d877      	bhi.n	8002464 <HAL_TIM_ConfigClockSource+0x16c>
 8002374:	2b50      	cmp	r3, #80	; 0x50
 8002376:	d03c      	beq.n	80023f2 <HAL_TIM_ConfigClockSource+0xfa>
 8002378:	2b50      	cmp	r3, #80	; 0x50
 800237a:	d873      	bhi.n	8002464 <HAL_TIM_ConfigClockSource+0x16c>
 800237c:	2b40      	cmp	r3, #64	; 0x40
 800237e:	d058      	beq.n	8002432 <HAL_TIM_ConfigClockSource+0x13a>
 8002380:	2b40      	cmp	r3, #64	; 0x40
 8002382:	d86f      	bhi.n	8002464 <HAL_TIM_ConfigClockSource+0x16c>
 8002384:	2b30      	cmp	r3, #48	; 0x30
 8002386:	d064      	beq.n	8002452 <HAL_TIM_ConfigClockSource+0x15a>
 8002388:	2b30      	cmp	r3, #48	; 0x30
 800238a:	d86b      	bhi.n	8002464 <HAL_TIM_ConfigClockSource+0x16c>
 800238c:	2b20      	cmp	r3, #32
 800238e:	d060      	beq.n	8002452 <HAL_TIM_ConfigClockSource+0x15a>
 8002390:	2b20      	cmp	r3, #32
 8002392:	d867      	bhi.n	8002464 <HAL_TIM_ConfigClockSource+0x16c>
 8002394:	2b00      	cmp	r3, #0
 8002396:	d05c      	beq.n	8002452 <HAL_TIM_ConfigClockSource+0x15a>
 8002398:	2b10      	cmp	r3, #16
 800239a:	d05a      	beq.n	8002452 <HAL_TIM_ConfigClockSource+0x15a>
 800239c:	e062      	b.n	8002464 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6818      	ldr	r0, [r3, #0]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	6899      	ldr	r1, [r3, #8]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	f000 f96a 	bl	8002686 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	609a      	str	r2, [r3, #8]
      break;
 80023ca:	e04f      	b.n	800246c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6818      	ldr	r0, [r3, #0]
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	6899      	ldr	r1, [r3, #8]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685a      	ldr	r2, [r3, #4]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f000 f953 	bl	8002686 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023ee:	609a      	str	r2, [r3, #8]
      break;
 80023f0:	e03c      	b.n	800246c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6818      	ldr	r0, [r3, #0]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	6859      	ldr	r1, [r3, #4]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	461a      	mov	r2, r3
 8002400:	f000 f8ca 	bl	8002598 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2150      	movs	r1, #80	; 0x50
 800240a:	4618      	mov	r0, r3
 800240c:	f000 f921 	bl	8002652 <TIM_ITRx_SetConfig>
      break;
 8002410:	e02c      	b.n	800246c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6818      	ldr	r0, [r3, #0]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	6859      	ldr	r1, [r3, #4]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	461a      	mov	r2, r3
 8002420:	f000 f8e8 	bl	80025f4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2160      	movs	r1, #96	; 0x60
 800242a:	4618      	mov	r0, r3
 800242c:	f000 f911 	bl	8002652 <TIM_ITRx_SetConfig>
      break;
 8002430:	e01c      	b.n	800246c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6818      	ldr	r0, [r3, #0]
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	6859      	ldr	r1, [r3, #4]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	461a      	mov	r2, r3
 8002440:	f000 f8aa 	bl	8002598 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2140      	movs	r1, #64	; 0x40
 800244a:	4618      	mov	r0, r3
 800244c:	f000 f901 	bl	8002652 <TIM_ITRx_SetConfig>
      break;
 8002450:	e00c      	b.n	800246c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4619      	mov	r1, r3
 800245c:	4610      	mov	r0, r2
 800245e:	f000 f8f8 	bl	8002652 <TIM_ITRx_SetConfig>
      break;
 8002462:	e003      	b.n	800246c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	73fb      	strb	r3, [r7, #15]
      break;
 8002468:	e000      	b.n	800246c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800246a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800247c:	7bfb      	ldrb	r3, [r7, #15]
}
 800247e:	4618      	mov	r0, r3
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr

08002498 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr

080024aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr

080024bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr
	...

080024d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a2b      	ldr	r2, [pc, #172]	; (8002590 <TIM_Base_SetConfig+0xc0>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d007      	beq.n	80024f8 <TIM_Base_SetConfig+0x28>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ee:	d003      	beq.n	80024f8 <TIM_Base_SetConfig+0x28>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a28      	ldr	r2, [pc, #160]	; (8002594 <TIM_Base_SetConfig+0xc4>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d108      	bne.n	800250a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	4313      	orrs	r3, r2
 8002508:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a20      	ldr	r2, [pc, #128]	; (8002590 <TIM_Base_SetConfig+0xc0>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d007      	beq.n	8002522 <TIM_Base_SetConfig+0x52>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002518:	d003      	beq.n	8002522 <TIM_Base_SetConfig+0x52>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a1d      	ldr	r2, [pc, #116]	; (8002594 <TIM_Base_SetConfig+0xc4>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d108      	bne.n	8002534 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002528:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	4313      	orrs	r3, r2
 8002532:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	4313      	orrs	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a0d      	ldr	r2, [pc, #52]	; (8002590 <TIM_Base_SetConfig+0xc0>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d103      	bne.n	8002568 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	691a      	ldr	r2, [r3, #16]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d005      	beq.n	8002586 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	f023 0201 	bic.w	r2, r3, #1
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	611a      	str	r2, [r3, #16]
  }
}
 8002586:	bf00      	nop
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr
 8002590:	40012c00 	.word	0x40012c00
 8002594:	40000400 	.word	0x40000400

08002598 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002598:	b480      	push	{r7}
 800259a:	b087      	sub	sp, #28
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	f023 0201 	bic.w	r2, r3, #1
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	011b      	lsls	r3, r3, #4
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	f023 030a 	bic.w	r3, r3, #10
 80025d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	4313      	orrs	r3, r2
 80025dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	621a      	str	r2, [r3, #32]
}
 80025ea:	bf00      	nop
 80025ec:	371c      	adds	r7, #28
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr

080025f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b087      	sub	sp, #28
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	f023 0210 	bic.w	r2, r3, #16
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800261e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	031b      	lsls	r3, r3, #12
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4313      	orrs	r3, r2
 8002628:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002630:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	011b      	lsls	r3, r3, #4
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	4313      	orrs	r3, r2
 800263a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	621a      	str	r2, [r3, #32]
}
 8002648:	bf00      	nop
 800264a:	371c      	adds	r7, #28
 800264c:	46bd      	mov	sp, r7
 800264e:	bc80      	pop	{r7}
 8002650:	4770      	bx	lr

08002652 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002652:	b480      	push	{r7}
 8002654:	b085      	sub	sp, #20
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
 800265a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002668:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4313      	orrs	r3, r2
 8002670:	f043 0307 	orr.w	r3, r3, #7
 8002674:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	609a      	str	r2, [r3, #8]
}
 800267c:	bf00      	nop
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	bc80      	pop	{r7}
 8002684:	4770      	bx	lr

08002686 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002686:	b480      	push	{r7}
 8002688:	b087      	sub	sp, #28
 800268a:	af00      	add	r7, sp, #0
 800268c:	60f8      	str	r0, [r7, #12]
 800268e:	60b9      	str	r1, [r7, #8]
 8002690:	607a      	str	r2, [r7, #4]
 8002692:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	021a      	lsls	r2, r3, #8
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	431a      	orrs	r2, r3
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	609a      	str	r2, [r3, #8]
}
 80026ba:	bf00      	nop
 80026bc:	371c      	adds	r7, #28
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr

080026c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d101      	bne.n	80026dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026d8:	2302      	movs	r3, #2
 80026da:	e041      	b.n	8002760 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2202      	movs	r2, #2
 80026e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002702:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	4313      	orrs	r3, r2
 800270c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a14      	ldr	r2, [pc, #80]	; (800276c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d009      	beq.n	8002734 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002728:	d004      	beq.n	8002734 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a10      	ldr	r2, [pc, #64]	; (8002770 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d10c      	bne.n	800274e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800273a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	68ba      	ldr	r2, [r7, #8]
 8002742:	4313      	orrs	r3, r2
 8002744:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	bc80      	pop	{r7}
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	40012c00 	.word	0x40012c00
 8002770:	40000400 	.word	0x40000400

08002774 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr

08002786 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002786:	b480      	push	{r7}
 8002788:	b083      	sub	sp, #12
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr

08002798 <__libc_init_array>:
 8002798:	b570      	push	{r4, r5, r6, lr}
 800279a:	2600      	movs	r6, #0
 800279c:	4d0c      	ldr	r5, [pc, #48]	; (80027d0 <__libc_init_array+0x38>)
 800279e:	4c0d      	ldr	r4, [pc, #52]	; (80027d4 <__libc_init_array+0x3c>)
 80027a0:	1b64      	subs	r4, r4, r5
 80027a2:	10a4      	asrs	r4, r4, #2
 80027a4:	42a6      	cmp	r6, r4
 80027a6:	d109      	bne.n	80027bc <__libc_init_array+0x24>
 80027a8:	f000 f822 	bl	80027f0 <_init>
 80027ac:	2600      	movs	r6, #0
 80027ae:	4d0a      	ldr	r5, [pc, #40]	; (80027d8 <__libc_init_array+0x40>)
 80027b0:	4c0a      	ldr	r4, [pc, #40]	; (80027dc <__libc_init_array+0x44>)
 80027b2:	1b64      	subs	r4, r4, r5
 80027b4:	10a4      	asrs	r4, r4, #2
 80027b6:	42a6      	cmp	r6, r4
 80027b8:	d105      	bne.n	80027c6 <__libc_init_array+0x2e>
 80027ba:	bd70      	pop	{r4, r5, r6, pc}
 80027bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80027c0:	4798      	blx	r3
 80027c2:	3601      	adds	r6, #1
 80027c4:	e7ee      	b.n	80027a4 <__libc_init_array+0xc>
 80027c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80027ca:	4798      	blx	r3
 80027cc:	3601      	adds	r6, #1
 80027ce:	e7f2      	b.n	80027b6 <__libc_init_array+0x1e>
 80027d0:	0800282c 	.word	0x0800282c
 80027d4:	0800282c 	.word	0x0800282c
 80027d8:	0800282c 	.word	0x0800282c
 80027dc:	08002830 	.word	0x08002830

080027e0 <memset>:
 80027e0:	4603      	mov	r3, r0
 80027e2:	4402      	add	r2, r0
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d100      	bne.n	80027ea <memset+0xa>
 80027e8:	4770      	bx	lr
 80027ea:	f803 1b01 	strb.w	r1, [r3], #1
 80027ee:	e7f9      	b.n	80027e4 <memset+0x4>

080027f0 <_init>:
 80027f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027f2:	bf00      	nop
 80027f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027f6:	bc08      	pop	{r3}
 80027f8:	469e      	mov	lr, r3
 80027fa:	4770      	bx	lr

080027fc <_fini>:
 80027fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027fe:	bf00      	nop
 8002800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002802:	bc08      	pop	{r3}
 8002804:	469e      	mov	lr, r3
 8002806:	4770      	bx	lr
